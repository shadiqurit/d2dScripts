DROP TABLE HRMS.AREA_STRUCTURE CASCADE CONSTRAINTS;

CREATE TABLE HRMS.AREA_STRUCTURE
(
  ID                 NUMBER,
  AREA_ID            VARCHAR2(20 BYTE)          DEFAULT NULL,
  AREA_NAME          VARCHAR2(50 BYTE)          DEFAULT NULL,
  PARENT_LEVEL_ID    VARCHAR2(20 BYTE)          DEFAULT NULL,
  PARENT_LEVEL_NAME  VARCHAR2(50 BYTE)          DEFAULT NULL,
  LEVEL0_ID          VARCHAR2(20 BYTE)          DEFAULT NULL,
  LEVEL0_NAME        VARCHAR2(50 BYTE)          DEFAULT NULL,
  LEVEL1_ID          VARCHAR2(20 BYTE)          DEFAULT NULL,
  LEVEL1_NAME        VARCHAR2(50 BYTE)          DEFAULT NULL,
  LEVEL2_ID          VARCHAR2(20 BYTE)          DEFAULT NULL,
  LEVEL2_NAME        VARCHAR2(50 BYTE)          DEFAULT NULL,
  LEVEL3_ID          VARCHAR2(100 BYTE)         DEFAULT NULL,
  LEVEL3_NAME        VARCHAR2(50 BYTE)          DEFAULT NULL,
  CREATED_ON         TIMESTAMP(6)               DEFAULT SYSTIMESTAMP,
  CREATED_BY         VARCHAR2(30 BYTE),
  UPDATED_ON         TIMESTAMP(6)               DEFAULT NULL,
  UPDATED_BY         VARCHAR2(30 BYTE),
  ORC_INSERT_DATE    DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


ALTER TABLE HRMS.AREA_STRUCTURE ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE HRMS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);


DROP TABLE HRMS.ATT_DEVICES CASCADE CONSTRAINTS;

CREATE TABLE HRMS.ATT_DEVICES
(
  ID      NUMBER,
  IP      VARCHAR2(15 BYTE),
  DETAIL  VARCHAR2(100 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.ATT_DEVICES_PK ON HRMS.ATT_DEVICES
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.ATT_DEVICES ADD (
  CONSTRAINT ATT_DEVICES_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.ATT_DEVICES_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.BOARD_UNIVERSITY CASCADE CONSTRAINTS;

CREATE TABLE HRMS.BOARD_UNIVERSITY
(
  ID        NUMBER,
  SLNO      NUMBER,
  NAME      VARCHAR2(300 BYTE),
  WEBSITE   VARCHAR2(300 BYTE),
  TYP       VARCHAR2(30 BYTE),
  CAT       VARCHAR2(30 BYTE),
  ENT_BY    NUMBER,
  ENT_DATE  DATE,
  UPD_BY    NUMBER,
  UPD_DATE  DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.BOARD_UNIVERSITY_PK ON HRMS.BOARD_UNIVERSITY
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.BOARD_UNIVERSITY ADD (
  CONSTRAINT BOARD_UNIVERSITY_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.BOARD_UNIVERSITY_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.BRANCH_DEPO CASCADE CONSTRAINTS;

CREATE TABLE HRMS.BRANCH_DEPO
(
  ID              NUMBER,
  CODE            VARCHAR2(5 BYTE),
  NAME            VARCHAR2(50 BYTE),
  ADDRESS         VARCHAR2(100 BYTE),
  CONTACT_PERSON  NUMBER,
  PHONE           VARCHAR2(30 BYTE),
  EMAIL           VARCHAR2(30 BYTE),
  ENT_BY          NUMBER,
  ENT_DATE        DATE,
  UPD_BY          NUMBER,
  UPD_DATE        DATE,
  IS_DEPO         NUMBER(1)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.BR_DEPOTS_PK ON HRMS.BRANCH_DEPO
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX HRMS.BR_DEPOTS_U01 ON HRMS.BRANCH_DEPO
(CODE)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.BRANCH_DEPO ADD (
  CONSTRAINT BR_DEPOTS_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.BR_DEPOTS_PK
  ENABLE VALIDATE
,  CONSTRAINT BR_DEPOTS_U01
  UNIQUE (CODE)
  USING INDEX HRMS.BR_DEPOTS_U01
  ENABLE VALIDATE);


DROP TABLE HRMS.COMPANY CASCADE CONSTRAINTS;

CREATE TABLE HRMS.COMPANY
(
  ID        NUMBER,
  CODE      VARCHAR2(5 BYTE),
  NAME      VARCHAR2(50 BYTE),
  ADDRESS   VARCHAR2(100 BYTE),
  REG_NO    VARCHAR2(30 BYTE),
  BIN       VARCHAR2(30 BYTE),
  PHONE     VARCHAR2(30 BYTE),
  EMAIL     VARCHAR2(30 BYTE),
  ENT_BY    NUMBER,
  ENT_DATE  DATE,
  UPD_BY    NUMBER,
  UPD_DATE  DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.COMPANY_PK ON HRMS.COMPANY
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX HRMS.COMPANY_U01 ON HRMS.COMPANY
(CODE)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX HRMS.COMPANY_U02 ON HRMS.COMPANY
(BIN)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.COMPANY ADD (
  CONSTRAINT COMPANY_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.COMPANY_PK
  ENABLE VALIDATE
,  CONSTRAINT COMPANY_U01
  UNIQUE (CODE)
  USING INDEX HRMS.COMPANY_U01
  ENABLE VALIDATE
,  CONSTRAINT COMPANY_U02
  UNIQUE (BIN)
  USING INDEX HRMS.COMPANY_U02
  ENABLE VALIDATE);


DROP TABLE HRMS.COM_UNIT CASCADE CONSTRAINTS;

CREATE TABLE HRMS.COM_UNIT
(
  ID        NUMBER,
  NAME      VARCHAR2(50 BYTE),
  ADDRESS   VARCHAR2(100 BYTE),
  PHONE     VARCHAR2(30 BYTE),
  EMAIL     VARCHAR2(30 BYTE),
  COM_ID    NUMBER,
  ENT_BY    NUMBER,
  ENT_DATE  DATE,
  UPD_BY    NUMBER,
  UPD_DATE  DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.UNITS_PK ON HRMS.COM_UNIT
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.COM_UNIT ADD (
  CONSTRAINT UNITS_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.UNITS_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.DEPARTMENTS CASCADE CONSTRAINTS;

CREATE TABLE HRMS.DEPARTMENTS
(
  ID         NUMBER,
  DEPT_NAME  VARCHAR2(50 BYTE),
  ADDRESS    VARCHAR2(100 BYTE),
  COM_ID     NUMBER,
  ENT_BY     NUMBER,
  ENT_DATE   DATE,
  UPD_BY     NUMBER,
  UPD_DATE   DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.DEPARTMENTS_PK ON HRMS.DEPARTMENTS
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.DEPARTMENTS ADD (
  CONSTRAINT DEPARTMENTS_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.DEPARTMENTS_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.DEPT CASCADE CONSTRAINTS;

CREATE TABLE HRMS.DEPT
(
  DEPTNO  NUMBER(2),
  DNAME   VARCHAR2(14 BYTE),
  LOC     VARCHAR2(13 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


ALTER TABLE HRMS.DEPT ADD (
  PRIMARY KEY
  (DEPTNO)
  USING INDEX
    TABLESPACE HRMS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);


DROP TABLE HRMS.DESIGCAT CASCADE CONSTRAINTS;

CREATE TABLE HRMS.DESIGCAT
(
  ID        NUMBER,
  CAT_NAME  VARCHAR2(50 BYTE),
  CAT       VARCHAR2(5 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


ALTER TABLE HRMS.DESIGCAT ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE HRMS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE
,  UNIQUE (CAT)
  USING INDEX
    TABLESPACE HRMS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);


DROP TABLE HRMS.DESIGNATIONS CASCADE CONSTRAINTS;

CREATE TABLE HRMS.DESIGNATIONS
(
  ID           NUMBER,
  REFNO        VARCHAR2(30 BYTE),
  REFDATE      DATE,
  CODE         VARCHAR2(30 BYTE),
  DESIGNATION  VARCHAR2(100 BYTE),
  ENT_BY       NUMBER,
  ENT_DATE     DATE,
  UPD_BY       NUMBER,
  UPD_DATE     DATE,
  CATA         VARCHAR2(5 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.DESIGNATIONS_PK ON HRMS.DESIGNATIONS
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.DESIGNATIONS ADD (
  CONSTRAINT DESIGNATIONS_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.DESIGNATIONS_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.DIVISION CASCADE CONSTRAINTS;

CREATE TABLE HRMS.DIVISION
(
  ID       NUMBER,
  NAME     VARCHAR2(100 BYTE)                   NOT NULL,
  BN_NAME  VARCHAR2(100 BYTE),
  URL      VARCHAR2(100 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.DIVISION_PK ON HRMS.DIVISION
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.DIVISION ADD (
  CONSTRAINT DIVISION_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.DIVISION_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.EMP CASCADE CONSTRAINTS;

CREATE TABLE HRMS.EMP
(
  EMPNO     NUMBER(4)                           NOT NULL,
  ENAME     VARCHAR2(10 BYTE),
  JOB       VARCHAR2(9 BYTE),
  MGR       NUMBER(4),
  HIREDATE  DATE,
  SAL       NUMBER(7,2),
  COMM      NUMBER(7,2),
  DEPTNO    NUMBER(2)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


ALTER TABLE HRMS.EMP ADD (
  PRIMARY KEY
  (EMPNO)
  USING INDEX
    TABLESPACE HRMS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);


DROP TABLE HRMS.EMP_EMERGENCY_CONTACT CASCADE CONSTRAINTS;

CREATE TABLE HRMS.EMP_EMERGENCY_CONTACT
(
  ID           NUMBER,
  EMP_ID       NUMBER,
  CONT_PERSON  VARCHAR2(50 BYTE),
  CONTACT      VARCHAR2(30 BYTE),
  ALT_CONT     VARCHAR2(30 BYTE),
  ENT_BY       NUMBER,
  ENT_DATE     DATE,
  UPD_BY       NUMBER,
  UPD_DATE     DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.EMP_EMERGENCY_CONTACT_PK ON HRMS.EMP_EMERGENCY_CONTACT
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.EMP_EMERGENCY_CONTACT ADD (
  CONSTRAINT EMP_EMERGENCY_CONTACT_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.EMP_EMERGENCY_CONTACT_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.EMP_EXPERIENCE CASCADE CONSTRAINTS;

CREATE TABLE HRMS.EMP_EXPERIENCE
(
  ID            NUMBER,
  EMP_ID        NUMBER,
  COMPANY_NAME  VARCHAR2(100 BYTE),
  JOB_TITLE     VARCHAR2(100 BYTE),
  JOB_DES       VARCHAR2(100 BYTE),
  START_DATE    DATE,
  END_DATE      DATE,
  DURATION      VARCHAR2(100 BYTE),
  REMARKS       VARCHAR2(100 BYTE),
  ENT_BY        NUMBER,
  ENT_DATE      DATE,
  UPD_BY        NUMBER,
  UPD_DATE      DATE,
  MIME_TYPE     VARCHAR2(200 BYTE),
  FILE_NAME     VARCHAR2(200 BYTE),
  UPD_AT        DATE                            DEFAULT SYSDATE,
  ATTACHMENT    BLOB
)
LOB (ATTACHMENT) STORE AS SECUREFILE (
  TABLESPACE  HRMS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING
  STORAGE    (
              INITIAL          104K
              NEXT             1M
              MINEXTENTS       1
              MAXEXTENTS       UNLIMITED
              PCTINCREASE      0
              BUFFER_POOL      DEFAULT
             ))
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.PK_EMP_ID_EXPERIENCE ON HRMS.EMP_EXPERIENCE
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.EMP_EXPERIENCE ADD (
  CONSTRAINT PK_EMP_ID_EXPERIENCE
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.PK_EMP_ID_EXPERIENCE
  ENABLE VALIDATE);


DROP TABLE HRMS.EMP_FAMILY_DTL CASCADE CONSTRAINTS;

CREATE TABLE HRMS.EMP_FAMILY_DTL
(
  ID        NUMBER,
  EMP_ID    NUMBER,
  RELATION  VARCHAR2(100 BYTE),
  NAME      VARCHAR2(100 BYTE),
  REMARKS   VARCHAR2(100 BYTE),
  ENT_BY    NUMBER,
  ENT_DATE  DATE,
  UPD_BY    NUMBER,
  UPD_DATE  DATE,
  DOB       DATE,
  AGE       VARCHAR2(50 BYTE),
  CONTACT   VARCHAR2(50 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.PK_EMP_FAMILY_DTL ON HRMS.EMP_FAMILY_DTL
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.EMP_FAMILY_DTL ADD (
  CONSTRAINT PK_EMP_FAMILY_DTL
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.PK_EMP_FAMILY_DTL
  ENABLE VALIDATE);


DROP TABLE HRMS.EMP_GUARANTORS CASCADE CONSTRAINTS;

CREATE TABLE HRMS.EMP_GUARANTORS
(
  ID                NUMBER,
  EMP_ID            NUMBER,
  NAME              VARCHAR2(100 BYTE),
  RELATIONSHIP      VARCHAR2(100 BYTE),
  CONTACT_DETAILS   VARCHAR2(255 BYTE),
  ADDRESS           VARCHAR2(100 BYTE),
  P_POST            NUMBER,
  P_THANA           NUMBER,
  P_DISTRICT        NUMBER,
  P_DIVISION        NUMBER,
  EMPCODE           VARCHAR2(150 BYTE),
  GRNT_NM           VARCHAR2(150 BYTE),
  GRNT_FATHER       VARCHAR2(150 BYTE),
  GRNT_ADD1         VARCHAR2(300 BYTE),
  GRNT_ADD2         VARCHAR2(300 BYTE),
  GRNT_RELE         VARCHAR2(150 BYTE),
  GRNT_NATIONALITY  VARCHAR2(45 BYTE),
  GRNT_PROFFESSION  VARCHAR2(30 BYTE),
  GRNT_BUSINES_ADD  VARCHAR2(300 BYTE),
  GRNT_NID          VARCHAR2(90 BYTE),
  GRNT_OFF_PHON     VARCHAR2(60 BYTE),
  GRNT_PASSPORT_NO  VARCHAR2(150 BYTE),
  GRNT_RES_PHONE    VARCHAR2(60 BYTE),
  GRNT_MOBILE       VARCHAR2(150 BYTE),
  REMARKS           VARCHAR2(100 BYTE),
  ENT_BY            NUMBER,
  ENT_DATE          DATE,
  UPD_BY            NUMBER,
  UPD_DATE          DATE,
  ADDRESS2          VARCHAR2(100 BYTE),
  POST              NUMBER,
  THANA             NUMBER,
  DISTRICT          NUMBER,
  DIVISION          NUMBER,
  IS_SAME_ADD       VARCHAR2(1 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


DROP TABLE HRMS.EMP_NOMINEE CASCADE CONSTRAINTS;

CREATE TABLE HRMS.EMP_NOMINEE
(
  ID               NUMBER,
  EMP_ID           NUMBER,
  NOMINEE_NAME     VARCHAR2(100 BYTE),
  RELATIONSHIP     VARCHAR2(100 BYTE),
  CONTACT_DETAILS  VARCHAR2(255 BYTE),
  ADDRESS          VARCHAR2(100 BYTE),
  P_POST           NUMBER,
  P_THANA          NUMBER,
  P_DISTRICT       NUMBER,
  P_DIVISION       NUMBER,
  REMARKS          VARCHAR2(100 BYTE),
  NID              VARCHAR2(30 BYTE),
  DOB              DATE,
  PRC              NUMBER,
  PIC              BLOB,
  NIDA             BLOB,
  ACN              BLOB,
  ENT_BY           NUMBER,
  ENT_DATE         DATE,
  UPD_BY           NUMBER,
  UPD_DATE         DATE,
  M_GURDIAN        VARCHAR2(50 BYTE),
  M_REL            VARCHAR2(50 BYTE),
  M_NID            VARCHAR2(30 BYTE),
  M_CONTACT        VARCHAR2(30 BYTE)
)
LOB (ACN) STORE AS SECUREFILE (
  TABLESPACE  HRMS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING
  STORAGE    (
              INITIAL          104K
              NEXT             1M
              MINEXTENTS       1
              MAXEXTENTS       UNLIMITED
              PCTINCREASE      0
              BUFFER_POOL      DEFAULT
             ))
LOB (NIDA) STORE AS SECUREFILE (
  TABLESPACE  HRMS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING
  STORAGE    (
              INITIAL          104K
              NEXT             1M
              MINEXTENTS       1
              MAXEXTENTS       UNLIMITED
              PCTINCREASE      0
              BUFFER_POOL      DEFAULT
             ))
LOB (PIC) STORE AS SECUREFILE (
  TABLESPACE  HRMS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING
  STORAGE    (
              INITIAL          104K
              NEXT             1M
              MINEXTENTS       1
              MAXEXTENTS       UNLIMITED
              PCTINCREASE      0
              BUFFER_POOL      DEFAULT
             ))
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.PK_EMP_NOMINEE ON HRMS.EMP_NOMINEE
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.EMP_NOMINEE ADD (
  CONSTRAINT PK_EMP_NOMINEE
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.PK_EMP_NOMINEE
  ENABLE VALIDATE);


DROP TABLE HRMS.EMP_TRAINING CASCADE CONSTRAINTS;

CREATE TABLE HRMS.EMP_TRAINING
(
  ID               NUMBER,
  EMP_ID           NUMBER,
  TRAINING_NAME    VARCHAR2(100 BYTE),
  INSTITUTION      VARCHAR2(100 BYTE),
  START_DATE       DATE,
  COMPLETION_DATE  DATE,
  DURATION         VARCHAR2(100 BYTE),
  REMARKS          VARCHAR2(100 BYTE),
  ENT_BY           NUMBER,
  ENT_DATE         DATE,
  UPD_BY           NUMBER,
  UPD_DATE         DATE,
  MIME_TYPE        VARCHAR2(200 BYTE),
  FILE_NAME        VARCHAR2(200 BYTE),
  UPD_AT           DATE                         DEFAULT SYSDATE,
  ATTACHMENT       BLOB,
  RESULT           VARCHAR2(30 BYTE),
  SESS             VARCHAR2(30 BYTE),
  TOPICS           VARCHAR2(200 BYTE),
  COUNTRY          VARCHAR2(50 BYTE)
)
LOB (ATTACHMENT) STORE AS SECUREFILE (
  TABLESPACE  HRMS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING
  STORAGE    (
              INITIAL          104K
              NEXT             1M
              MINEXTENTS       1
              MAXEXTENTS       UNLIMITED
              PCTINCREASE      0
              BUFFER_POOL      DEFAULT
             ))
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.PK_EMP_TRAINING ON HRMS.EMP_TRAINING
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.EMP_TRAINING ADD (
  CONSTRAINT PK_EMP_TRAINING
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.PK_EMP_TRAINING
  ENABLE VALIDATE);


DROP TABLE HRMS.EXAMS CASCADE CONSTRAINTS;

CREATE TABLE HRMS.EXAMS
(
  ID        NUMBER,
  NAME      VARCHAR2(100 BYTE),
  ENT_BY    NUMBER,
  ENT_DATE  DATE,
  UPD_BY    NUMBER,
  UPD_DATE  DATE,
  TYP       VARCHAR2(10 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.EXAMS_PK ON HRMS.EXAMS
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX HRMS.EXAMS_U01 ON HRMS.EXAMS
(NAME)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.EXAMS ADD (
  CONSTRAINT EXAMS_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.EXAMS_PK
  ENABLE VALIDATE
,  CONSTRAINT EXAMS_U01
  UNIQUE (NAME)
  USING INDEX HRMS.EXAMS_U01
  ENABLE VALIDATE);


DROP TABLE HRMS.FIELD_STRUCTURE CASCADE CONSTRAINTS;

CREATE TABLE HRMS.FIELD_STRUCTURE
(
  ID           NUMBER,
  STR_ID       VARCHAR2(20 BYTE),
  STR_NAME     VARCHAR2(50 BYTE),
  PARENT_ID    VARCHAR2(20 BYTE),
  PARENT_NAME  VARCHAR2(50 BYTE),
  REG_ID       VARCHAR2(20 BYTE),
  REGION       VARCHAR2(50 BYTE),
  ZONE_ID      VARCHAR2(20 BYTE),
  ZONES        VARCHAR2(50 BYTE),
  ARR_ID       VARCHAR2(20 BYTE),
  AREA         VARCHAR2(50 BYTE),
  TERR_ID      VARCHAR2(100 BYTE),
  TERRITORY    VARCHAR2(50 BYTE),
  TYP          VARCHAR2(10 BYTE),
  ENT_BY       NUMBER,
  ENT_DATE     DATE,
  UPD_BY       NUMBER,
  UPD_DATE     DATE,
  STATUS       VARCHAR2(10 BYTE),
  OLD_ID       NUMBER,
  IS_COST      VARCHAR2(3 BYTE),
  COM_ID       NUMBER,
  P_ID         NUMBER
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.FIELD_STRUCTURE_PK ON HRMS.FIELD_STRUCTURE
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.FIELD_STRUCTURE ADD (
  CONSTRAINT FIELD_STRUCTURE_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.FIELD_STRUCTURE_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.HR_EMPFAMILYDET CASCADE CONSTRAINTS;

CREATE TABLE HRMS.HR_EMPFAMILYDET
(
  SLNO        NUMBER,
  EMPCODE     VARCHAR2(50 BYTE),
  FAMILYDES   VARCHAR2(50 BYTE),
  FNAME       VARCHAR2(100 BYTE),
  F_AGE       VARCHAR2(30 BYTE),
  F_OCUP      VARCHAR2(70 BYTE),
  F_ADD       VARCHAR2(100 BYTE),
  PHONE       VARCHAR2(25 BYTE),
  CHILD_NOS   NUMBER,
  BIRTH_DATE  DATE,
  USERNAME    VARCHAR2(100 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


DROP TABLE HRMS.HTMLDB_PLAN_TABLE CASCADE CONSTRAINTS;

CREATE TABLE HRMS.HTMLDB_PLAN_TABLE
(
  STATEMENT_ID       VARCHAR2(30 BYTE),
  PLAN_ID            NUMBER,
  TIMESTAMP          DATE,
  REMARKS            VARCHAR2(4000 BYTE),
  OPERATION          VARCHAR2(30 BYTE),
  OPTIONS            VARCHAR2(255 BYTE),
  OBJECT_NODE        VARCHAR2(128 BYTE),
  OBJECT_OWNER       VARCHAR2(128 BYTE),
  OBJECT_NAME        VARCHAR2(128 BYTE),
  OBJECT_ALIAS       VARCHAR2(261 BYTE),
  OBJECT_INSTANCE    INTEGER,
  OBJECT_TYPE        VARCHAR2(128 BYTE),
  OPTIMIZER          VARCHAR2(255 BYTE),
  SEARCH_COLUMNS     NUMBER,
  ID                 INTEGER,
  PARENT_ID          INTEGER,
  DEPTH              INTEGER,
  POSITION           INTEGER,
  COST               INTEGER,
  CARDINALITY        INTEGER,
  BYTES              INTEGER,
  OTHER_TAG          VARCHAR2(255 BYTE),
  PARTITION_START    VARCHAR2(255 BYTE),
  PARTITION_STOP     VARCHAR2(255 BYTE),
  PARTITION_ID       INTEGER,
  OTHER              LONG,
  DISTRIBUTION       VARCHAR2(30 BYTE),
  CPU_COST           INTEGER,
  IO_COST            INTEGER,
  TEMP_SPACE         INTEGER,
  ACCESS_PREDICATES  VARCHAR2(4000 BYTE),
  FILTER_PREDICATES  VARCHAR2(4000 BYTE),
  PROJECTION         VARCHAR2(4000 BYTE),
  TIME               INTEGER,
  QBLOCK_NAME        VARCHAR2(128 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


DROP TABLE HRMS.JOB_GRADES CASCADE CONSTRAINTS;

CREATE TABLE HRMS.JOB_GRADES
(
  ID           NUMBER,
  GRADE_NAME   VARCHAR2(100 BYTE),
  MIN_SALARY   NUMBER,
  MAX_SALARY   NUMBER,
  DESCRIPTION  VARCHAR2(255 BYTE),
  ENT_DATE     DATE                             DEFAULT SYSDATE,
  UPD_DATE     DATE,
  ENT_BY       NUMBER,
  UPD_BY       NUMBER,
  SCALES       VARCHAR2(100 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


ALTER TABLE HRMS.JOB_GRADES ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE HRMS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);


DROP TABLE HRMS.LEAVE_TYPES CASCADE CONSTRAINTS;

CREATE TABLE HRMS.LEAVE_TYPES
(
  LT_ID            NUMBER,
  SHORT_CODE       VARCHAR2(5 BYTE),
  LEAVE_TYPE_NAME  VARCHAR2(50 BYTE)            NOT NULL,
  DESCRIPTION      VARCHAR2(100 BYTE),
  ANNUAL_QUOTA     NUMBER,
  IS_PAID          CHAR(1 BYTE),
  ACTIVE_FLAG      CHAR(1 BYTE)                 DEFAULT 'Y',
  ENT_BY           VARCHAR2(50 BYTE),
  ENT_DATE         DATE                         DEFAULT SYSDATE,
  UPD_BY           VARCHAR2(50 BYTE),
  UPD_DATE         DATE,
  COM_ID           NUMBER
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.LEAVE_TYPES_PK ON HRMS.LEAVE_TYPES
(LT_ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.LEAVE_TYPES ADD (
  CHECK (is_paid IN ('Y', 'N'))
  ENABLE VALIDATE
,  CHECK (active_flag IN ('Y', 'N'))
  ENABLE VALIDATE
,  CONSTRAINT LEAVE_TYPES_PK
  PRIMARY KEY
  (LT_ID)
  USING INDEX HRMS.LEAVE_TYPES_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.LOCATIONS CASCADE CONSTRAINTS;

CREATE TABLE HRMS.LOCATIONS
(
  ID        NUMBER,
  NAME      VARCHAR2(50 BYTE),
  ADDRESS   VARCHAR2(100 BYTE),
  PHONE     VARCHAR2(30 BYTE),
  EMAIL     VARCHAR2(30 BYTE),
  COM_ID    NUMBER,
  ENT_BY    NUMBER,
  ENT_DATE  DATE,
  UPD_BY    NUMBER,
  UPD_DATE  DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.LOCATIONS_PK ON HRMS.LOCATIONS
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.LOCATIONS ADD (
  CONSTRAINT LOCATIONS_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.LOCATIONS_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.RELATIONS CASCADE CONSTRAINTS;

CREATE TABLE HRMS.RELATIONS
(
  ID     NUMBER GENERATED BY DEFAULT AS IDENTITY ( START WITH 81 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP NOSCALE) NOT NULL,
  RNAME  VARCHAR2(50 BYTE),
  RTYPE  VARCHAR2(20 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


ALTER TABLE HRMS.RELATIONS ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE HRMS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);


DROP TABLE HRMS.REP_AREA CASCADE CONSTRAINTS;

CREATE TABLE HRMS.REP_AREA
(
  ID               NUMBER,
  REP_ID           VARCHAR2(20 BYTE),
  NAME             VARCHAR2(50 BYTE),
  REP_CATEGORY     VARCHAR2(20 BYTE),
  AREA_ID          VARCHAR2(20 BYTE),
  AREA_NAME        VARCHAR2(50 BYTE),
  CREATED_ON       TIMESTAMP(6)                 DEFAULT SYSTIMESTAMP,
  CREATED_BY       VARCHAR2(30 BYTE),
  UPDATED_ON       TIMESTAMP(6),
  UPDATED_BY       VARCHAR2(30 BYTE),
  ORC_INSERT_DATE  DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


ALTER TABLE HRMS.REP_AREA ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE HRMS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);


DROP TABLE HRMS.SUBJECTS CASCADE CONSTRAINTS;

CREATE TABLE HRMS.SUBJECTS
(
  ID        NUMBER,
  NAME      VARCHAR2(100 BYTE),
  ENT_BY    NUMBER,
  ENT_DATE  DATE,
  UPD_BY    NUMBER,
  UPD_DATE  DATE,
  TYP       VARCHAR2(10 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.SUBJECTS_PK ON HRMS.SUBJECTS
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.SUBJECTS ADD (
  CONSTRAINT SUBJECTS_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.SUBJECTS_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.SUP_AREA CASCADE CONSTRAINTS;

CREATE TABLE HRMS.SUP_AREA
(
  ID               NUMBER,
  SUP_ID           VARCHAR2(20 BYTE),
  NAME             VARCHAR2(50 BYTE),
  AREA_ID          VARCHAR2(20 BYTE),
  AREA_NAME        VARCHAR2(50 BYTE),
  LEVEL_DEPTH_NO   NUMBER(2),
  CREATED_ON       TIMESTAMP(6)                 DEFAULT SYSTIMESTAMP,
  CREATED_BY       VARCHAR2(30 BYTE),
  UPDATED_ON       TIMESTAMP(6),
  UPDATED_BY       VARCHAR2(30 BYTE),
  ORC_INSERT_DATE  DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


ALTER TABLE HRMS.SUP_AREA ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE HRMS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);


DROP TABLE HRMS.T_EMP_TYP CASCADE CONSTRAINTS;

CREATE TABLE HRMS.T_EMP_TYP
(
  ID           NUMBER,
  ETYPE        VARCHAR2(100 BYTE),
  DESCRIPTION  VARCHAR2(100 BYTE),
  ENT_BY       NUMBER,
  ENT_DATE     DATE                             DEFAULT SYSDATE,
  UPD_BY       NUMBER,
  UPD_DATE     DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.PK_T_EMP_TYP ON HRMS.T_EMP_TYP
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.T_EMP_TYP ADD (
  CONSTRAINT PK_T_EMP_TYP
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.PK_T_EMP_TYP
  ENABLE VALIDATE);


DROP TABLE HRMS.T_GRADE CASCADE CONSTRAINTS;

CREATE TABLE HRMS.T_GRADE
(
  ID         NUMBER,
  GNAME      VARCHAR2(30 BYTE),
  GDESC      VARCHAR2(100 BYTE),
  REFDATE    DATE,
  BASICS     NUMBER(20,2),
  INCRRATE   NUMBER(10,2),
  EBRATE     NUMBER,
  HR         NUMBER,
  CONV       NUMBER,
  MEDICAL    NUMBER,
  ALLOWANCE  NUMBER,
  CPF        NUMBER,
  PF         NUMBER,
  SAF        NUMBER,
  REF_RATE   NUMBER,
  REF_HOL    NUMBER,
  STATUS     VARCHAR2(10 BYTE),
  ENT_BY     NUMBER,
  ENT_DATE   DATE,
  UPD_BY     NUMBER,
  UPD_DATE   DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


DROP TABLE HRMS.T_HOLIDAY CASCADE CONSTRAINTS;

CREATE TABLE HRMS.T_HOLIDAY
(
  ID            NUMBER,
  HOLIDAY_NAME  VARCHAR2(100 BYTE)              NOT NULL,
  LOC_ID        NUMBER,
  HOLIDAY_DATE  DATE                            NOT NULL,
  IS_RECURRING  NUMBER(1)                       DEFAULT 0,
  YEAR          NUMBER,
  DESCRIPTION   VARCHAR2(255 BYTE),
  COM_ID        NUMBER,
  ENT_BY        NUMBER,
  ENT_DATE      DATE,
  UPD_BY        NUMBER,
  UPD_DATE      DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


ALTER TABLE HRMS.T_HOLIDAY ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE HRMS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);


DROP TABLE HRMS.T_MENU CASCADE CONSTRAINTS;

CREATE TABLE HRMS.T_MENU
(
  PID               NUMBER                      NOT NULL,
  PARENT_PID        NUMBER,
  MENU_NAME         NVARCHAR2(100),
  MENU_LINK         NVARCHAR2(200),
  STATUS            NVARCHAR2(1),
  DESCRIPTION       NVARCHAR2(200),
  SORT_BY           NUMBER,
  ENT_BY            NUMBER,
  UPD_BY            NUMBER,
  ENT_DATE          DATE                        DEFAULT SYSDATE,
  UPD_DATE          DATE,
  ICON_IMG          VARCHAR2(250 BYTE),
  MENU_NAME_BANGLA  VARCHAR2(250 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.T_MENU_CON_PK ON HRMS.T_MENU
(PID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.T_MENU ADD (
  CONSTRAINT T_MENU_C01
  CHECK (parent_pid <> pid)
  ENABLE VALIDATE
,  CONSTRAINT T_MENU_CON_PK
  PRIMARY KEY
  (PID)
  USING INDEX HRMS.T_MENU_CON_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.T_SEP_TYP CASCADE CONSTRAINTS;

CREATE TABLE HRMS.T_SEP_TYP
(
  ID           NUMBER,
  ETYPE        VARCHAR2(100 BYTE),
  DESCRIPTION  VARCHAR2(100 BYTE),
  ENT_BY       NUMBER,
  ENT_DATE     DATE                             DEFAULT SYSDATE,
  UPD_BY       NUMBER,
  UPD_DATE     DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.PK_T_SEP_TYP ON HRMS.T_SEP_TYP
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.T_SEP_TYP ADD (
  CONSTRAINT PK_T_SEP_TYP
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.PK_T_SEP_TYP
  ENABLE VALIDATE);


DROP TABLE HRMS.T_STATUS CASCADE CONSTRAINTS;

CREATE TABLE HRMS.T_STATUS
(
  ID      NUMBER(1),
  STATUS  VARCHAR2(30 BYTE),
  CODE    VARCHAR2(5 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.T_STATUS_PK ON HRMS.T_STATUS
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.T_STATUS ADD (
  CONSTRAINT T_STATUS_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.T_STATUS_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.T_STRUCTURE CASCADE CONSTRAINTS;

CREATE TABLE HRMS.T_STRUCTURE
(
  ID         NUMBER,
  STR_NAME   VARCHAR2(100 BYTE),
  STR_TYPE   VARCHAR2(20 BYTE),
  CODE       VARCHAR2(100 BYTE),
  PARENT_ID  NUMBER,
  DEPT_ID    NUMBER,
  COMP_ID    NUMBER,
  UNIT       NUMBER,
  STATUS     VARCHAR2(20 BYTE),
  ENT_BY     NUMBER,
  ENT_DATE   DATE                               DEFAULT SYSDATE,
  UPD_BY     NUMBER,
  UPD_DATE   DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.T_STRUCTURE_PK ON HRMS.T_STRUCTURE
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.T_STRUCTURE ADD (
  CONSTRAINT T_STRUCTURE_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.T_STRUCTURE_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.USERS_COMPANY CASCADE CONSTRAINTS;

CREATE TABLE HRMS.USERS_COMPANY
(
  ID      NUMBER,
  COM_ID  NUMBER,
  EMPID   NUMBER
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.CM_SYS_USERS_COM_R03 ON HRMS.USERS_COMPANY
(COM_ID, EMPID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX HRMS.USERS_COMPANY_PK ON HRMS.USERS_COMPANY
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.USERS_COMPANY ADD (
  CONSTRAINT USERS_COMPANY_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.USERS_COMPANY_PK
  ENABLE VALIDATE
,  CONSTRAINT CM_SYS_USERS_COM_R03
  UNIQUE (COM_ID, EMPID)
  USING INDEX HRMS.CM_SYS_USERS_COM_R03
  ENABLE VALIDATE);


DROP TABLE HRMS.USER_GROUP CASCADE CONSTRAINTS;

CREATE TABLE HRMS.USER_GROUP
(
  ID          NUMBER,
  GROUP_NAME  VARCHAR2(50 BYTE),
  ENT_BY      NUMBER,
  ENT_DATE    DATE,
  UPD_BY      NUMBER,
  UPD_DATE    DATE
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.USER_GROUP_PK ON HRMS.USER_GROUP
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.USER_GROUP ADD (
  CONSTRAINT USER_GROUP_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.USER_GROUP_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.USER_MENU CASCADE CONSTRAINTS;

CREATE TABLE HRMS.USER_MENU
(
  PID         NUMBER                            NOT NULL,
  PID_GROUP   NUMBER                            NOT NULL,
  PAGE_ID     NUMBER,
  PERMISSION  NUMBER(1)                         DEFAULT 1
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.C_USER_MENU_PK ON HRMS.USER_MENU
(PID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX HRMS.C_USER_MENU_U01 ON HRMS.USER_MENU
(PID_GROUP, PAGE_ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.USER_MENU ADD (
  CONSTRAINT C_USER_MENU_PK
  PRIMARY KEY
  (PID)
  USING INDEX HRMS.C_USER_MENU_PK
  ENABLE VALIDATE
,  CONSTRAINT C_USER_MENU_U01
  UNIQUE (PID_GROUP, PAGE_ID)
  USING INDEX HRMS.C_USER_MENU_U01
  ENABLE VALIDATE);


DROP SEQUENCE HRMS.ISEQ$$_149033;

-- Sequence ISEQ$$_149033 is created automatically by Oracle for use with an Identity column


--  There is no statement for index HRMS.SYS_C0014922.
--  The object is created when the parent object is created.

--  There is no statement for index HRMS.SYS_C0014924.
--  The object is created when the parent object is created.

--  There is no statement for index HRMS.SYS_C0015828.
--  The object is created when the parent object is created.

--  There is no statement for index HRMS.SYS_C0015865.
--  The object is created when the parent object is created.

--  There is no statement for index HRMS.SYS_C0017173.
--  The object is created when the parent object is created.

--  There is no statement for index HRMS.SYS_C0017174.
--  The object is created when the parent object is created.

--  There is no statement for index HRMS.SYS_C0017175.
--  The object is created when the parent object is created.

--  There is no statement for index HRMS.SYS_C0018447.
--  The object is created when the parent object is created.

--  There is no statement for index HRMS.SYS_C0018448.
--  The object is created when the parent object is created.

--  There is no statement for index HRMS.SYS_C0018815.
--  The object is created when the parent object is created.

DROP SEQUENCE HRMS.DEPT_SEQ;

CREATE SEQUENCE HRMS.DEPT_SEQ
  START WITH 50
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  NOSCALE
  GLOBAL;


CREATE OR REPLACE TRIGGER HRMS.dept_trg1
              before insert ON HRMS.DEPT
              for each row
begin
                  if :new.deptno is null then
                      select dept_seq.nextval into :new.deptno from sys.dual;
                 end if;
              end;
/


DROP SEQUENCE HRMS.EMP_SEQ;

CREATE SEQUENCE HRMS.EMP_SEQ
  START WITH 8200
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  NOSCALE
  GLOBAL;


CREATE OR REPLACE TRIGGER HRMS.emp_trg1
              before insert ON HRMS.EMP
              for each row
begin
                  if :new.empno is null then
                      select emp_seq.nextval into :new.empno from sys.dual;
                 end if;
              end;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_BRANCH_DEPO_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.BRANCH_DEPO
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM BRANCH_DEPO;
    END IF;
END TRG_BRANCH_DEPO_PK;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_COMPANY_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.COMPANY
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM COMPANY;
    END IF;
END TRG_COMPANY_PK;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_departments_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.DEPARTMENTS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM departments;
    END IF;
END TRG_departments_PK;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_desigcat_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.DESIGCAT
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM desigcat;
    END IF;
END TRG_desigcat_PK;
/


CREATE OR REPLACE TRIGGER HRMS.trg_desig_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.DESIGNATIONS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM designations;
    END IF;
END trg_desig_pk;
/


CREATE OR REPLACE TRIGGER HRMS.trg_division_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.DIVISION
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM division;
    END IF;
END trg_division_pk;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_EMP_EXPERIENCE_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMP_EXPERIENCE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_EXPERIENCE;
    END IF;
END TRG_EMP_EXPERIENCE_PK;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_EMP_FAMILY_DTL_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMP_FAMILY_DTL
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_FAMILY_DTL;
    END IF;
END TRG_EMP_FAMILY_DTL_PK;
/


CREATE OR REPLACE TRIGGER HRMS.trg_emp_guarantors_same_add
BEFORE INSERT OR UPDATE ON HRMS.EMP_GUARANTORS
FOR EACH ROW
BEGIN
  IF :NEW.is_same_add = 'Y' THEN
    :NEW.address     := :NEW.address2;
    :NEW.p_post      := :NEW.post;
    :NEW.p_thana     := :NEW.thana;
    :NEW.p_district  := :NEW.district;
    :NEW.p_division  := :NEW.division;
  END IF;
END;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_EMP_NOMINEE_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMP_NOMINEE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_NOMINEE;
    END IF;
END TRG_EMP_NOMINEE_PK;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_EMP_TRAINING_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMP_TRAINING
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_TRAINING;
    END IF;
END TRG_EMP_TRAINING_PK;
/


CREATE OR REPLACE TRIGGER HRMS.trg_exams_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.EXAMS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM exams;
    END IF;
END trg_exams_pk;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_FIELD_STRUCTURE_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.FIELD_STRUCTURE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM FIELD_STRUCTURE;
    END IF;
END TRG_FIELD_STRUCTURE_PK;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_job_grades_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.JOB_GRADES
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM job_grades;
    END IF;
END TRG_job_grades_PK;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_LOCATIONS_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.LOCATIONS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM LOCATIONS;
    END IF;
END TRG_LOCATIONS_PK;
/


CREATE OR REPLACE TRIGGER HRMS.trg_subjects_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.SUBJECTS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM subjects;
    END IF;
END trg_subjects_pk;
/


CREATE OR REPLACE TRIGGER HRMS.trg_t_emp_typ_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.T_EMP_TYP
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_emp_typ;
    END IF;
END trg_t_emp_typ_pk;
/


CREATE OR REPLACE TRIGGER HRMS.trg_t_grade_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.T_GRADE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_grade;
    END IF;
END trg_t_grade_pk;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_T_HOLIDAY_PK
    BEFORE INSERT OR UPDATE
    ON hrms.t_holiday
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_holiday;
    END IF;
END trg_t_holiday_pk;
/


CREATE OR REPLACE TRIGGER HRMS.trg_T_sep_TYP_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.T_SEP_TYP
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM T_sep_TYP;
    END IF;
END trg_T_sep_TYP_pk;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_T_STRUCTURE_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.t_structure
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_structure;
    END IF;
END trg_t_structure_pk;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_UNITS_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.COM_UNIT
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM com_unit;
    END IF;
END TRG_UNITS_PK;
/


CREATE OR REPLACE TRIGGER HRMS.trg_user_group_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.USER_GROUP
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM user_group;
    END IF;
END trg_user_group_pk;
/


CREATE OR REPLACE TRIGGER HRMS.t_grade_upd
    BEFORE UPDATE
    ON HRMS.T_GRADE
    FOR EACH ROW
BEGIN
    IF UPDATING
    THEN
        IF :new.gname IN ('GRADE-15',
                          'GRADE-16',
                          'GRADE-17',
                          'GRADE-18',
                          'GRADE-19',
                          'GRADE-20',
                          'NON GRADE',
                          'PRVN')
        THEN
            raise_application_error (-20001, 'Can not change record');
        END IF;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER HRMS.T_T_Menu_Pk_Auto
    Before Insert Or Update
    ON HRMS.T_MENU
    For Each Row
Begin
    If :New.Pid Is Null
    Then
        Select Nvl (Max (Pid), 0) + 1 Into :New.Pid From T_Menu;
    End If;
End T_T_Menu_Pk_Auto;
/


CREATE OR REPLACE TRIGGER HRMS.t_users_company_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.USERS_COMPANY
    FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :NEW.id FROM USERS_COMPANY;
    END IF;
END t_users_company_pk;
/


DROP TABLE HRMS.DISTRICT CASCADE CONSTRAINTS;

CREATE TABLE HRMS.DISTRICT
(
  ID           NUMBER,
  DIVISION_ID  NUMBER,
  NAME         VARCHAR2(250 BYTE),
  BN_NAME      VARCHAR2(250 BYTE),
  LAT          VARCHAR2(150 BYTE),
  LON          VARCHAR2(150 BYTE),
  URL          VARCHAR2(150 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.DISTRICT_PK ON HRMS.DISTRICT
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.DISTRICT ADD (
  CONSTRAINT DISTRICT_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.DISTRICT_PK
  ENABLE VALIDATE);


DROP TABLE HRMS.EMPLOYEES CASCADE CONSTRAINTS;

CREATE TABLE HRMS.EMPLOYEES
(
  ID               NUMBER,
  EMP_ID           VARCHAR2(30 BYTE),
  F_NAME           VARCHAR2(30 BYTE),
  L_NAME           VARCHAR2(30 BYTE),
  DOB              DATE,
  MOBILE           VARCHAR2(30 BYTE),
  EMAIL            VARCHAR2(50 BYTE),
  FATHER           VARCHAR2(50 BYTE),
  MOTHER           VARCHAR2(50 BYTE),
  GENDER           VARCHAR2(10 BYTE),
  HEIGHT           VARCHAR2(30 BYTE),
  WEIGHT           VARCHAR2(30 BYTE),
  BLOOD            VARCHAR2(10 BYTE),
  NID              VARCHAR2(30 BYTE),
  ADDRESS          VARCHAR2(300 BYTE),
  C_POST           NUMBER,
  C_THANA          NUMBER,
  C_DISTRICT       NUMBER,
  C_DIVISION       NUMBER,
  P_ADDRESS        VARCHAR2(300 BYTE),
  P_POST           NUMBER,
  P_THANA          NUMBER,
  P_DISTRICT       NUMBER,
  P_DIVISION       NUMBER,
  PHOTO            BLOB,
  JOIN_DATE        DATE,
  MARITAL_STATUS   VARCHAR2(10 BYTE),
  EMP_TYPE         VARCHAR2(30 BYTE),
  DEPT_ID          NUMBER,
  LOC_ID           NUMBER,
  BRANCH_ID        NUMBER,
  DESIG_ID         NUMBER,
  COM_ID           NUMBER,
  JOB_ID           NUMBER,
  USER_GRP         NUMBER(3)                    DEFAULT 0,
  PASSW            VARCHAR2(32 BYTE),
  ENT_BY           NUMBER,
  ENT_DATE         DATE,
  UPD_BY           NUMBER,
  UPD_DATE         DATE,
  STATUS           NUMBER,
  MIME_TYPE        VARCHAR2(200 BYTE),
  FILE_NAME        VARCHAR2(200 BYTE),
  EMPNO            VARCHAR2(15 BYTE),
  RELIGION         VARCHAR2(30 BYTE),
  ATT_DEV_ID       NUMBER(30),
  SECTION_ID       NUMBER,
  MC_ID            NUMBER,
  STR_ID           NUMBER,
  EMPID            NUMBER,
  RETIREMENT_DATE  DATE,
  RESP             VARCHAR2(100 BYTE),
  SEP_DATE         DATE,
  IS_SAME_ADD      VARCHAR2(1 BYTE),
  CONF_DATE        DATE
)
LOB (PHOTO) STORE AS SECUREFILE (
  TABLESPACE  HRMS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING
  STORAGE    (
              INITIAL          104K
              NEXT             1M
              MINEXTENTS       1
              MAXEXTENTS       UNLIMITED
              PCTINCREASE      0
              BUFFER_POOL      DEFAULT
             ))
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.EMPLOYEES_U01 ON HRMS.EMPLOYEES
(MC_ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX HRMS.EMPLOYESS_U01 ON HRMS.EMPLOYEES
(EMP_ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX HRMS.PK_EMPLOYESS ON HRMS.EMPLOYEES
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.EMPLOYEES ADD (
  CONSTRAINT PK_EMPLOYESS
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.PK_EMPLOYESS
  ENABLE VALIDATE
,  CONSTRAINT EMPLOYEES_U01
  UNIQUE (MC_ID)
  USING INDEX HRMS.EMPLOYEES_U01
  ENABLE VALIDATE
,  CONSTRAINT EMPLOYESS_U01
  UNIQUE (EMP_ID)
  USING INDEX HRMS.EMPLOYESS_U01
  ENABLE VALIDATE
,  CONSTRAINT EMPLOYESS_U02
  UNIQUE (EMAIL)
  DISABLE NOVALIDATE
,  CONSTRAINT EMPLOYESS_U03
  UNIQUE (NID)
  DISABLE NOVALIDATE);


DROP TABLE HRMS.EMP_EDUCATION CASCADE CONSTRAINTS;

CREATE TABLE HRMS.EMP_EDUCATION
(
  ID            NUMBER,
  EMP_ID        NUMBER,
  EXAM          NUMBER,
  SUB_GROUP     NUMBER,
  PASSING_YEAR  NUMBER(4),
  DURATION      NUMBER,
  BOARD         NUMBER,
  REMARKS       VARCHAR2(100 BYTE),
  ENT_BY        NUMBER,
  ENT_DATE      DATE,
  UPD_BY        NUMBER,
  UPD_DATE      DATE,
  MIME_TYPE     VARCHAR2(200 BYTE),
  FILE_NAME     VARCHAR2(200 BYTE),
  UPD_AT        DATE                            DEFAULT SYSDATE,
  ATTACHMENT    BLOB,
  SLNO          NUMBER,
  EMPCODE       VARCHAR2(50 BYTE),
  EXAMGROUP     VARCHAR2(70 BYTE),
  BOARD_N       VARCHAR2(100 BYTE),
  CLAS          VARCHAR2(30 BYTE),
  PASSYEAR      VARCHAR2(10 BYTE),
  INSTITUTE     VARCHAR2(50 BYTE),
  SUBJECT_NAME  VARCHAR2(200 BYTE),
  EXAMNAME      VARCHAR2(70 BYTE),
  BACHELORS     VARCHAR2(200 BYTE),
  CGPA          VARCHAR2(30 BYTE)
)
LOB (ATTACHMENT) STORE AS SECUREFILE (
  TABLESPACE  HRMS
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING
  STORAGE    (
              INITIAL          104K
              NEXT             1M
              MINEXTENTS       1
              MAXEXTENTS       UNLIMITED
              PCTINCREASE      0
              BUFFER_POOL      DEFAULT
             ))
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.PK_EMP_EDUCATION ON HRMS.EMP_EDUCATION
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.EMP_EDUCATION ADD (
  CONSTRAINT PK_EMP_EDUCATION
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.PK_EMP_EDUCATION
  ENABLE VALIDATE);


DROP TABLE HRMS.UPAZILA CASCADE CONSTRAINTS;

CREATE TABLE HRMS.UPAZILA
(
  ID           NUMBER(10),
  DISTRICT_ID  NUMBER(10),
  NAME         VARCHAR2(250 BYTE),
  BN_NAME      VARCHAR2(205 BYTE),
  URL          VARCHAR2(150 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.UPAZILA_PK ON HRMS.UPAZILA
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.UPAZILA ADD (
  CONSTRAINT UPAZILA_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.UPAZILA_PK
  ENABLE VALIDATE);


CREATE OR REPLACE TRIGGER HRMS.trg_district_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.DISTRICT
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM district;
    END IF;
END trg_district_pk;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_EMPLOYEES_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMPLOYEES
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM employees;
    END IF;

    IF :NEW.is_same_add = 'Y'
    THEN
        :NEW.P_ADDRESS := :NEW.address;
        :NEW.p_post := :NEW.C_POST;
        :NEW.p_thana := :NEW.C_THANA;
        :NEW.p_district := :NEW.C_DISTRICT;
        :NEW.p_division := :NEW.C_DIVISION;
    END IF;
END TRG_EMPLOYEES_PK;
/


CREATE OR REPLACE TRIGGER HRMS.TRG_EMP_EDUCATION_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMP_EDUCATION
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM emp_education;
    END IF;
END trg_emp_education_pk;
/


CREATE OR REPLACE TRIGGER HRMS.trg_upazila_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.UPAZILA
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM upazila;
    END IF;
END trg_upazila_pk;
/


CREATE OR REPLACE TRIGGER HRMS.t_user_company_asgn
    AFTER INSERT
    ON HRMS.EMPLOYEES
    FOR EACH ROW
BEGIN
    INSERT INTO users_company (EMPID, com_id)
         VALUES (:new.id, 1);
END t_user_company_asgn;
/


DROP TABLE HRMS.UNIONS CASCADE CONSTRAINTS;

CREATE TABLE HRMS.UNIONS
(
  ID           NUMBER(10),
  UPAZILLA_ID  NUMBER(10),
  NAME         VARCHAR2(250 BYTE),
  BN_NAME      VARCHAR2(250 BYTE),
  URL          VARCHAR2(150 BYTE)
)
TABLESPACE HRMS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX HRMS.UNIONS_PK ON HRMS.UNIONS
(ID)
LOGGING
TABLESPACE HRMS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE HRMS.UNIONS ADD (
  CONSTRAINT UNIONS_PK
  PRIMARY KEY
  (ID)
  USING INDEX HRMS.UNIONS_PK
  ENABLE VALIDATE);


CREATE OR REPLACE TRIGGER HRMS.trg_UNIONS_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.UNIONS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM UNIONS;
    END IF;
END trg_UNIONS_pk;
/


ALTER TABLE HRMS.EMP ADD (
  FOREIGN KEY (MGR) 
  REFERENCES HRMS.EMP (EMPNO)
  ENABLE VALIDATE
,  FOREIGN KEY (DEPTNO) 
  REFERENCES HRMS.DEPT (DEPTNO)
  ENABLE VALIDATE);

ALTER TABLE HRMS.EMP_EXPERIENCE ADD (
  CONSTRAINT FK_EMP_ID_EXPERIENCE 
  FOREIGN KEY (EMP_ID) 
  REFERENCES HRMS.EMPLOYEES (ID)
  ENABLE VALIDATE);

ALTER TABLE HRMS.EMP_FAMILY_DTL ADD (
  CONSTRAINT FK_EMP_ID_FAMILY_DTL 
  FOREIGN KEY (EMP_ID) 
  REFERENCES HRMS.EMPLOYEES (ID)
  ENABLE VALIDATE);

ALTER TABLE HRMS.EMP_NOMINEE ADD (
  CONSTRAINT FK_EMP_ID_NOMINEE 
  FOREIGN KEY (EMP_ID) 
  REFERENCES HRMS.EMPLOYEES (ID)
  ENABLE VALIDATE);

ALTER TABLE HRMS.EMP_TRAINING ADD (
  CONSTRAINT FK_EMP_ID_TRAINING 
  FOREIGN KEY (EMP_ID) 
  REFERENCES HRMS.EMPLOYEES (ID)
  ENABLE VALIDATE);

ALTER TABLE HRMS.T_HOLIDAY ADD (
  CONSTRAINT FK_BRANCH_DEPO 
  FOREIGN KEY (LOC_ID) 
  REFERENCES HRMS.BRANCH_DEPO (ID)
  ON DELETE CASCADE
  ENABLE VALIDATE);

ALTER TABLE HRMS.T_MENU ADD (
  CONSTRAINT T_MENU_CON 
  FOREIGN KEY (PARENT_PID) 
  REFERENCES HRMS.T_MENU (PID)
  ENABLE VALIDATE);

ALTER TABLE HRMS.T_STRUCTURE ADD (
  CONSTRAINT T_STRUCTURE_R01 
  FOREIGN KEY (PARENT_ID) 
  REFERENCES HRMS.T_STRUCTURE (ID)
  ENABLE VALIDATE);

ALTER TABLE HRMS.DISTRICT ADD (
  CONSTRAINT DISTRICT_R01 
  FOREIGN KEY (DIVISION_ID) 
  REFERENCES HRMS.DIVISION (ID)
  ENABLE VALIDATE);

ALTER TABLE HRMS.EMPLOYEES ADD (
  CONSTRAINT EMPLOYEES_R01 
  FOREIGN KEY (USER_GRP) 
  REFERENCES HRMS.USER_GROUP (ID)
  ENABLE VALIDATE);

ALTER TABLE HRMS.EMP_EDUCATION ADD (
  CONSTRAINT FK_EMP_EDUCATION 
  FOREIGN KEY (EMP_ID) 
  REFERENCES HRMS.EMPLOYEES (ID)
  ENABLE VALIDATE);

ALTER TABLE HRMS.UPAZILA ADD (
  CONSTRAINT UPAZILA_R01 
  FOREIGN KEY (DISTRICT_ID) 
  REFERENCES HRMS.DISTRICT (ID)
  ENABLE VALIDATE);

ALTER TABLE HRMS.UNIONS ADD (
  CONSTRAINT UNIONS_R01 
  FOREIGN KEY (UPAZILLA_ID) 
  REFERENCES HRMS.UPAZILA (ID)
  ENABLE VALIDATE);

DROP PROCEDURE HRMS.MERGE_INTO_T_STRUCTURE;

CREATE OR REPLACE PROCEDURE HRMS.merge_into_t_structure
AS
BEGIN
    MERGE INTO T_STRUCTURE target
         USING (SELECT 3 || id       AS id,
                       DESIGNATION     STR_NAME,
                       'DESIG'       STR_TYPE,
                       code,
                       3             parent_id,
                       1             status
                  FROM DESIGNATIONS) source
            ON (target.id = source.id)
    WHEN MATCHED
    THEN
        UPDATE SET target.STR_NAME = source.STR_NAME,
                   target.STR_TYPE = source.STR_TYPE,
                   target.CODE = source.code,
                   target.PARENT_ID = source.parent_id,
                   target.status = source.status
    WHEN NOT MATCHED
    THEN
        INSERT     (id,
                    STR_NAME,
                    STR_TYPE,
                    CODE,
                    PARENT_ID,
                    status)
            VALUES (source.id,
                    source.STR_NAME,
                    source.STR_TYPE,
                    source.code,
                    source.parent_id,
                    source.status);

    COMMIT;
END;
/


DROP PROCEDURE HRMS.P_AREA_STRUCTURE;

CREATE OR REPLACE PROCEDURE HRMS.p_area_structure
AS
BEGIN
    MERGE INTO AREA_STRUCTURE trg
         USING (SELECT ID,
                       AREA_ID,
                       AREA_NAME,
                       PARENT_LEVEL_ID,
                       PARENT_LEVEL_NAME,
                       LEVEL0_ID,
                       LEVEL0_NAME,
                       LEVEL1_ID,
                       LEVEL1_NAME,
                       LEVEL2_ID,
                       LEVEL2_NAME,
                       LEVEL3_ID,
                       LEVEL3_NAME,
                       CREATED_ON,
                       CREATED_BY,
                       UPDATED_ON,
                       UPDATED_BY,
                       ORC_INSERT_DATE
                  FROM v_area_struct) src
            ON (trg.ID = src.ID)                         -- Match condition
    WHEN MATCHED
    THEN
        UPDATE SET trg.AREA_ID = src.AREA_ID,
                   trg.AREA_NAME = src.AREA_NAME,
                   trg.PARENT_LEVEL_ID = src.PARENT_LEVEL_ID,
                   trg.PARENT_LEVEL_NAME = src.PARENT_LEVEL_NAME,
                   trg.LEVEL0_ID = src.LEVEL0_ID,
                   trg.LEVEL0_NAME = src.LEVEL0_NAME,
                   trg.LEVEL1_ID = src.LEVEL1_ID,
                   trg.LEVEL1_NAME = src.LEVEL1_NAME,
                   trg.LEVEL2_ID = src.LEVEL2_ID,
                   trg.LEVEL2_NAME = src.LEVEL2_NAME,
                   trg.LEVEL3_ID = src.LEVEL3_ID,
                   trg.LEVEL3_NAME = src.LEVEL3_NAME,
                   trg.UPDATED_ON = SYSTIMESTAMP,
                   trg.UPDATED_BY = src.UPDATED_BY,
                   trg.ORC_INSERT_DATE = src.ORC_INSERT_DATE
    WHEN NOT MATCHED
    THEN
        INSERT     (ID,
                    AREA_ID,
                    AREA_NAME,
                    PARENT_LEVEL_ID,
                    PARENT_LEVEL_NAME,
                    LEVEL0_ID,
                    LEVEL0_NAME,
                    LEVEL1_ID,
                    LEVEL1_NAME,
                    LEVEL2_ID,
                    LEVEL2_NAME,
                    LEVEL3_ID,
                    LEVEL3_NAME,
                    CREATED_ON,
                    CREATED_BY,
                    UPDATED_ON,
                    UPDATED_BY,
                    ORC_INSERT_DATE)
            VALUES (src.ID,
                    src.AREA_ID,
                    src.AREA_NAME,
                    src.PARENT_LEVEL_ID,
                    src.PARENT_LEVEL_NAME,
                    src.LEVEL0_ID,
                    src.LEVEL0_NAME,
                    src.LEVEL1_ID,
                    src.LEVEL1_NAME,
                    src.LEVEL2_ID,
                    src.LEVEL2_NAME,
                    src.LEVEL3_ID,
                    src.LEVEL3_NAME,
                    src.CREATED_ON,
                    src.CREATED_BY,
                    SYSTIMESTAMP,
                    src.UPDATED_BY,
                    src.ORC_INSERT_DATE);

    COMMIT;                          -- Commit the transaction to save changes

    DBMS_OUTPUT.PUT_LINE (
        'Data successfully updated or inserted into AREA_STRUCTURE.');
EXCEPTION
    WHEN OTHERS
    THEN
        ROLLBACK;                                -- Roll back changes on error
        DBMS_OUTPUT.PUT_LINE ('Error occurred: ' || SQLERRM);
END p_area_structure;
/


DROP PROCEDURE HRMS.P_AREA_UP;

CREATE OR REPLACE PROCEDURE HRMS.p_AREA_up
AS
BEGIN
    MERGE INTO T_STRUCTURE target
         USING (SELECT DISTINCT ST.ID,
                                area_name     str_name,
                                'AREA'        str_type,
                                area_id       code,
                                TS.ID         parent_id,
                                1             status
                  FROM area_structure st, t_structure ts
                 WHERE st.PARENT_LEVEL_ID = ts.CODE AND str_type = 'ZONE')
               source
            ON (target.code = source.code)
    WHEN MATCHED
    THEN
        UPDATE SET target.STR_NAME = source.STR_NAME,
                   target.STR_TYPE = source.STR_TYPE,
                   --target.CODE = source.code,
                   target.PARENT_ID = source.parent_id,
                   target.status = source.status
    WHEN NOT MATCHED
    THEN
        INSERT     (id,
                    STR_NAME,
                    STR_TYPE,
                    CODE,
                    PARENT_ID,
                    status)
            VALUES (regionid.NEXTVAL,
                    source.STR_NAME,
                    source.STR_TYPE,
                    source.code,
                    source.parent_id,
                    source.status);

    COMMIT;
END;
/


DROP PROCEDURE HRMS.P_DEPT_ID_UP;

CREATE OR REPLACE PROCEDURE HRMS.p_dept_id_up AS
BEGIN
    MERGE INTO employees e
    USING (
        SELECT DISTINCT v.department_name, d.ID AS DEPT_ID, v.EMP_ID
        FROM v_emp_hrms@IPIHR v
        JOIN departments d ON v.department_name = d.DEPT_NAME
    ) v
    ON (e.EMP_ID = v.EMP_ID)
    WHEN MATCHED THEN
        UPDATE SET e.DEPT_ID = v.DEPT_ID
    WHEN NOT MATCHED THEN
        INSERT (EMP_ID, DEPT_ID)
        VALUES (v.EMP_ID, v.DEPT_ID);

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Merge completed successfully.');

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END p_dept_id_up;
/


DROP PROCEDURE HRMS.P_DESIGUP;

CREATE OR REPLACE PROCEDURE HRMS.P_DESIGUP
AS
BEGIN
    MERGE INTO employees e
    USING (
        SELECT EMP_ID, DESIG_ID
        FROM (
            SELECT DISTINCT v.EMP_ID, d.ID AS DESIG_ID,
                   ROW_NUMBER() OVER (PARTITION BY v.EMP_ID ORDER BY d.ID) AS rn
            FROM v_emp_hrms@IPIHR v
            JOIN designations d ON v.desig_name = d.DESIGNATION
        ) WHERE rn = 1  -- Select only one row per EMP_ID
    ) v
    ON (e.EMP_ID = v.EMP_ID)
    WHEN MATCHED THEN
        UPDATE SET e.DESIG_ID = v.DESIG_ID;

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Designation update completed successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END P_DESIGUP;
/


DROP PROCEDURE HRMS.P_EMPLOYEES_MERGE;

CREATE OR REPLACE PROCEDURE HRMS.p_employees_merge
AS
BEGIN
    MERGE INTO employees e
         USING (SELECT id,
                       emp_id,
                       empno,
                       nid,
                       first_name      AS F_NAME,
                       last_name       AS L_NAME,
                       birthdate       AS DOB,
                       phone           AS MOBILE,
                       join_date,
                       email,
                       empsex          AS GENDER,
                       maritalst       AS MARITAL_STATUS,
                       father_name     AS FATHER,
                       mother_name     AS MOTHER,
                       height,
                       weight,
                       bld_group       AS BLOOD,
                       religion,
                       add1            AS ADDRESS,
                       p_add1          AS P_ADDRESS,
                       '123'           AS PASSW
                  FROM v_emp_hrms@ipihr) v
            ON (v.emp_id = e.emp_id)
    WHEN MATCHED
    THEN
   
        UPDATE SET e.EMPNO = v.EMPNO,
                   e.NID = v.NID,
                   e.F_NAME = v.F_NAME,
                   e.L_NAME = v.L_NAME,
                   e.DOB = v.DOB,
                   e.MOBILE = v.MOBILE,
                   e.JOIN_DATE = v.JOIN_DATE,
                   e.EMAIL = v.EMAIL,
                   e.GENDER = v.GENDER,
                   e.MARITAL_STATUS = v.MARITAL_STATUS,
                   e.FATHER = v.FATHER,
                   e.MOTHER = v.MOTHER,
                   e.HEIGHT = v.HEIGHT,
                   e.WEIGHT = v.WEIGHT,
                   e.BLOOD = v.BLOOD,
                   e.religion = v.religion,
                   e.ADDRESS = v.ADDRESS,
                   e.P_ADDRESS = v.P_ADDRESS,
                   e.PASSW = v.PASSW
WHEN NOT MATCHED
    THEN
        INSERT     (ID,
                    EMP_ID,
                    EMPNO,
                    NID,
                    F_NAME,
                    L_NAME,
                    DOB,
                    MOBILE,
                    JOIN_DATE,
                    EMAIL,
                    GENDER,
                    MARITAL_STATUS,
                    FATHER,
                    MOTHER,
                    HEIGHT,
                    WEIGHT,
                    BLOOD,
                    religion,
                    ADDRESS,
                    P_ADDRESS,
                    PASSW)
            VALUES (v.ID,
                    v.EMP_ID,
                    v.EMPNO,
                    v.NID,
                    v.F_NAME,
                    v.L_NAME,
                    v.DOB,
                    v.MOBILE,
                    v.JOIN_DATE,
                    v.EMAIL,
                    v.GENDER,
                    v.MARITAL_STATUS,
                    v.FATHER,
                    v.MOTHER,
                    v.HEIGHT,
                    v.WEIGHT,
                    v.BLOOD,
                    v.religion,
                    v.ADDRESS,
                    v.P_ADDRESS,
                    v.PASSW);



    COMMIT;

    DBMS_OUTPUT.PUT_LINE ('Merge completed successfully.');
EXCEPTION
    WHEN OTHERS
    THEN
        DBMS_OUTPUT.PUT_LINE ('Error: ' || SQLERRM);
        ROLLBACK;
END p_employees_merge;
/


DROP PROCEDURE HRMS.P_FIELD_STR;

CREATE OR REPLACE PROCEDURE HRMS.p_field_str
AS
BEGIN
    MERGE INTO field_structure trg
         USING (SELECT ID,
                       AREA_ID,
                       AREA_NAME,
                       PARENT_LEVEL_ID,
                       PARENT_LEVEL_NAME,
                       LEVEL0_ID,
                       LEVEL0_NAME,
                       LEVEL1_ID,
                       LEVEL1_NAME,
                       LEVEL2_ID,
                       LEVEL2_NAME,
                       LEVEL3_ID,
                       LEVEL3_NAME,
                       CREATED_ON,
                       CREATED_BY,
                       UPDATED_ON,
                       UPDATED_BY
                  FROM v_area_struct) src
            ON (trg.OLD_ID = src.ID)                        -- Match condition
    WHEN MATCHED
    THEN
        UPDATE SET trg.str_id = src.AREA_id,
                   trg.STR_NAME = src.AREA_NAME,
                   trg.PARENT_ID = src.PARENT_LEVEL_ID,
                   trg.PARENT_NAME = src.PARENT_LEVEL_NAME,
                   trg.REG_ID = src.LEVEL0_ID,
                   trg.REGION = src.LEVEL0_NAME,
                   trg.ZONE_ID = src.LEVEL1_ID,
                   trg.ZONES = src.LEVEL1_NAME,
                   trg.ARR_ID = src.LEVEL2_ID,
                   trg.AREA = src.LEVEL2_NAME,
                   trg.TERR_ID = src.LEVEL3_ID,
                   trg.TERRITORY = src.LEVEL3_NAME
    WHEN NOT MATCHED
    THEN
        INSERT     (ID,
                    str_id,
                    STR_NAME,
                    PARENT_ID,
                    PARENT_NAME,
                    REG_ID,
                    REGION,
                    ZONE_ID,
                    ZONES,
                    ARR_ID,
                    AREA,
                    TERR_ID,
                    TERRITORY,
                    TYP,
                    ENT_BY,
                    ENT_DATE,
                    UPD_BY,
                    UPD_DATE,
                    STATUS,
                    OLD_ID)
            VALUES (src.ID,
                    src.AREA_ID,
                    src.AREA_NAME,
                    src.PARENT_LEVEL_ID,
                    src.PARENT_LEVEL_NAME,
                    src.LEVEL0_ID,
                    src.LEVEL0_NAME,
                    src.LEVEL1_ID,
                    src.LEVEL1_NAME,
                    src.LEVEL2_ID,
                    src.LEVEL2_NAME,
                    src.LEVEL3_ID,
                    src.LEVEL3_NAME,
                    '',
                    null,
                    src.CREATED_ON,
                    null,
                    SYSTIMESTAMP,
                    1,
                    src.ID);

    COMMIT;                          -- Commit the transaction to save changes

    DBMS_OUTPUT.PUT_LINE (
        'Data successfully updated or inserted.');
EXCEPTION
    WHEN OTHERS
    THEN
        ROLLBACK;                                -- Roll back changes on error
        DBMS_OUTPUT.PUT_LINE ('Error occurred: ' || SQLERRM);
END p_field_str;
/


DROP PROCEDURE HRMS.P_REGION_UP;

CREATE OR REPLACE PROCEDURE HRMS.p_region_up
AS
   
BEGIN
    

    MERGE INTO T_STRUCTURE target
         USING (SELECT AREA_NAME     STR_NAME,
                       'REGION'      STR_TYPE,
                       AREA_ID       code,
                       423           parent_id,
                       1             status
                  FROM AREA_STRUCTURE
                 WHERE PARENT_LEVEL_ID = '0') source
            ON (target.code = source.code)
    WHEN MATCHED
    THEN
        UPDATE SET target.STR_NAME = source.STR_NAME,
                   target.STR_TYPE = source.STR_TYPE,
                   --target.CODE = source.code,
                   target.PARENT_ID = source.parent_id,
                   target.status = source.status
    WHEN NOT MATCHED
    THEN
        INSERT     (id,
                    STR_NAME,
                    STR_TYPE,
                    CODE,
                    PARENT_ID,
                    status)
            VALUES (regionid.nextval,
                    source.STR_NAME,
                    source.STR_TYPE,
                    source.code,
                    source.parent_id,
                    source.status);

    COMMIT;
END;
/


DROP PROCEDURE HRMS.P_REP_AREA;

CREATE OR REPLACE PROCEDURE HRMS.p_rep_area
AS
BEGIN
    MERGE INTO REP_AREA trg
         USING (SELECT ID,
                       REP_ID,
                       NAME,
                       REP_CATEGORY,
                       AREA_ID,
                       AREA_NAME,
                       CREATED_ON,
                       CREATED_BY,
                       UPDATED_ON,
                       UPDATED_BY,
                       ORC_INSERT_DATE
                  FROM v_rep_area) src
            ON (trg.ID = src.ID)   -- Match condition: ID as the unique key
    WHEN MATCHED
    THEN
        UPDATE SET trg.REP_ID = src.REP_ID,
                   trg.NAME = src.NAME,
                   trg.REP_CATEGORY = src.REP_CATEGORY,
                   trg.AREA_ID = src.AREA_ID,
                   trg.AREA_NAME = src.AREA_NAME,
                   trg.UPDATED_ON = SYSTIMESTAMP,
                   trg.UPDATED_BY = src.UPDATED_BY,
                   trg.ORC_INSERT_DATE = src.ORC_INSERT_DATE
    WHEN NOT MATCHED
    THEN
        INSERT     (ID,
                    REP_ID,
                    NAME,
                    REP_CATEGORY,
                    AREA_ID,
                    AREA_NAME,
                    CREATED_ON,
                    CREATED_BY,
                    UPDATED_ON,
                    UPDATED_BY,
                    ORC_INSERT_DATE)
            VALUES (src.ID,
                    src.REP_ID,
                    src.NAME,
                    src.REP_CATEGORY,
                    src.AREA_ID,
                    src.AREA_NAME,
                    SYSTIMESTAMP,
                    src.CREATED_BY,
                    SYSTIMESTAMP,
                    src.UPDATED_BY,
                    src.ORC_INSERT_DATE);

    COMMIT;                                              -- Commit transaction

    DBMS_OUTPUT.PUT_LINE ('Data successfully merged into REP_AREA table.');
EXCEPTION
    WHEN OTHERS
    THEN
        ROLLBACK;                  -- Rollback transaction in case of an error
        DBMS_OUTPUT.PUT_LINE ('Error occurred: ' || SQLERRM);
END p_rep_area;
/


DROP PROCEDURE HRMS.P_SUP_AREA;

CREATE OR REPLACE PROCEDURE HRMS.p_sup_area
AS
BEGIN
    MERGE INTO SUP_AREA trg
         USING (SELECT ID,
                       SUP_ID,
                       NAME,
                       AREA_ID,
                       AREA_NAME,
                       LEVEL_DEPTH_NO,
                       CREATED_ON,
                       CREATED_BY,
                       UPDATED_ON,
                       UPDATED_BY,
                       ORC_INSERT_DATE
                  FROM v_sup_area) src
            ON (trg.ID = src.ID)   -- Match condition: ID is the unique key
    WHEN MATCHED
    THEN
        UPDATE SET trg.SUP_ID = src.SUP_ID,
                   trg.NAME = src.NAME,
                   trg.AREA_ID = src.AREA_ID,
                   trg.AREA_NAME = src.AREA_NAME,
                   trg.LEVEL_DEPTH_NO = src.LEVEL_DEPTH_NO,
                   trg.UPDATED_ON = SYSTIMESTAMP,
                   trg.UPDATED_BY = src.UPDATED_BY,
                   trg.ORC_INSERT_DATE = src.ORC_INSERT_DATE
    WHEN NOT MATCHED
    THEN
        INSERT     (ID,
                    SUP_ID,
                    NAME,
                    AREA_ID,
                    AREA_NAME,
                    LEVEL_DEPTH_NO,
                    CREATED_ON,
                    CREATED_BY,
                    UPDATED_ON,
                    UPDATED_BY,
                    ORC_INSERT_DATE)
            VALUES (src.ID,
                    src.SUP_ID,
                    src.NAME,
                    src.AREA_ID,
                    src.AREA_NAME,
                    src.LEVEL_DEPTH_NO,
                    SYSTIMESTAMP,
                    src.CREATED_BY,
                    SYSTIMESTAMP,
                    src.UPDATED_BY,
                    src.ORC_INSERT_DATE);

    COMMIT;                                          -- Commit the transaction

    DBMS_OUTPUT.PUT_LINE ('Data successfully merged into SUP_AREA table.');
EXCEPTION
    WHEN OTHERS
    THEN
        ROLLBACK;                             -- Rollback transaction on error
        DBMS_OUTPUT.PUT_LINE ('Error occurred: ' || SQLERRM);
END p_sup_area;
/


DROP PROCEDURE HRMS.P_TERI_UP;

CREATE OR REPLACE PROCEDURE HRMS.p_teri_up
AS
BEGIN
    MERGE INTO T_STRUCTURE target
         USING (SELECT DISTINCT ST.ID,
                                area_name     str_name,
                                'TERI'        str_type,
                                area_id       code,
                                TS.ID         parent_id,
                                1             status
                  FROM area_structure st, t_structure ts
                 WHERE st.PARENT_LEVEL_ID = ts.CODE AND str_type = 'AREA')
               source
            ON (target.code = source.code)
    WHEN MATCHED
    THEN
        UPDATE SET target.STR_NAME = source.STR_NAME,
                   target.STR_TYPE = source.STR_TYPE,
                   --target.CODE = source.code,
                   target.PARENT_ID = source.parent_id,
                   target.status = source.status
    WHEN NOT MATCHED
    THEN
        INSERT     (id,
                    STR_NAME,
                    STR_TYPE,
                    CODE,
                    PARENT_ID,
                    status)
            VALUES (regionid.NEXTVAL,
                    source.STR_NAME,
                    source.STR_TYPE,
                    source.code,
                    source.parent_id,
                    source.status);

    COMMIT;
END;
/


DROP PROCEDURE HRMS.P_ZONE_UP;

CREATE OR REPLACE PROCEDURE HRMS.p_zone_up
AS
BEGIN
    MERGE INTO T_STRUCTURE target
         USING (SELECT DISTINCT area_name     str_name,
                                'ZONE'        str_type,
                                area_id       code,
                                TS.ID         parent_id,
                                1             status
                  FROM area_structure st, t_structure ts
                 WHERE st.PARENT_LEVEL_ID = ts.CODE AND str_type = 'REGION')
               source
            ON (target.code = source.code)
    WHEN MATCHED
    THEN
        UPDATE SET target.STR_NAME = source.STR_NAME,
                   target.STR_TYPE = source.STR_TYPE,
                   --target.CODE = source.code,
                   target.PARENT_ID = source.parent_id,
                   target.status = source.status
    WHEN NOT MATCHED
    THEN
        INSERT     (id,
                    STR_NAME,
                    STR_TYPE,
                    CODE,
                    PARENT_ID,
                    status)
            VALUES (regionid.NEXTVAL,
                    source.STR_NAME,
                    source.STR_TYPE,
                    source.code,
                    source.parent_id,
                    source.status);

    COMMIT;
END;
/

DROP FUNCTION HRMS.FN_CUSTOM_LOGIN;

CREATE OR REPLACE FUNCTION HRMS.fn_custom_login (p_username   IN VARCHAR2,
                                            p_password   IN VARCHAR2)
    RETURN BOOLEAN
IS
    v_password          VARCHAR2 (4000);
    v_stored_password   VARCHAR2 (4000);
    v_count             NUMBER;
BEGIN
    SELECT COUNT (*)
      INTO v_count
      FROM employees
     WHERE lower (emp_id) = lower (p_username);

    IF v_count != 0
    THEN
        SELECT passw
          INTO v_stored_password
          FROM employees
         WHERE lower (emp_id) = lower (p_username);

        v_password := p_password;

        IF v_password = v_stored_password
        THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END IF;
END fn_custom_login;
/


DROP FUNCTION HRMS.GET_AGE;

CREATE OR REPLACE FUNCTION HRMS.get_age (p_dob DATE)
    RETURN VARCHAR2
IS
    v_years      NUMBER;
    v_months     NUMBER;
    v_days       NUMBER;
    v_temp_dob   DATE;
BEGIN
    -- Calculate total months between today and DOB
    v_years := TRUNC (MONTHS_BETWEEN (SYSDATE, p_dob) / 12);
    v_months := TRUNC (MOD (MONTHS_BETWEEN (SYSDATE, p_dob), 12));
    -- Calculate remaining days after subtracting years and months
    v_temp_dob := ADD_MONTHS (p_dob, v_years * 12 + v_months);
    v_days := TRUNC (SYSDATE - v_temp_dob);

    RETURN    v_years
           || ' Years '
           || v_months
           || ' Months '
           || v_days
           || ' Days';
END;
/


DROP FUNCTION HRMS.GET_LENGTH;

CREATE OR REPLACE FUNCTION HRMS.get_length (p_join_date DATE, p_last_date DATE)
    RETURN VARCHAR2
IS
    v_years      NUMBER;
    v_months     NUMBER;
    v_days       NUMBER;
    v_temp_dob   DATE;
BEGIN
    -- Calculate total months between today and DOB
    v_years := TRUNC (MONTHS_BETWEEN (p_last_date, p_join_date) / 12);
    v_months := TRUNC (MOD (MONTHS_BETWEEN (p_last_date, p_join_date), 12));
    -- Calculate remaining days after subtracting years and months
    v_temp_dob := ADD_MONTHS (p_join_date, v_years * 12 + v_months);
    v_days := TRUNC (p_last_date - v_temp_dob);

    RETURN    v_years
           || ' Years '
           || v_months
           || ' Months '
           || v_days
           || ' Days';
END;
/


DROP FUNCTION HRMS.WM_CONCAT;

CREATE OR REPLACE FUNCTION HRMS.WM_CONCAT (p_input VARCHAR2)
    RETURN VARCHAR2
    PARALLEL_ENABLE
    AGGREGATE USING t_string_agg;
/

DROP TYPE HRMS.T_STRING_AGG;

CREATE OR REPLACE TYPE HRMS.T_STRING_AGG AS OBJECT
(
    g_string VARCHAR2 (32767),
    STATIC FUNCTION ODCIAggregateInitialize (sctx IN OUT t_string_agg)
        RETURN NUMBER,
    MEMBER FUNCTION ODCIAggregateIterate (self    IN OUT t_string_agg,
                                          VALUE   IN     VARCHAR2)
        RETURN NUMBER,
    MEMBER FUNCTION ODCIAggregateTerminate (self          IN     t_string_agg,
                                            returnValue      OUT VARCHAR2,
                                            flags         IN     NUMBER)
        RETURN NUMBER,
    MEMBER FUNCTION ODCIAggregateMerge (self   IN OUT t_string_agg,
                                        ctx2   IN     t_string_agg)
        RETURN NUMBER
);
/

DROP TRIGGER HRMS.DEPT_TRG1;

CREATE OR REPLACE TRIGGER HRMS.dept_trg1
              before insert ON HRMS.DEPT
              for each row
begin
                  if :new.deptno is null then
                      select dept_seq.nextval into :new.deptno from sys.dual;
                 end if;
              end;
/


DROP TRIGGER HRMS.EMP_TRG1;

CREATE OR REPLACE TRIGGER HRMS.emp_trg1
              before insert ON HRMS.EMP
              for each row
begin
                  if :new.empno is null then
                      select emp_seq.nextval into :new.empno from sys.dual;
                 end if;
              end;
/


DROP TRIGGER HRMS.TRG_BRANCH_DEPO_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_BRANCH_DEPO_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.BRANCH_DEPO
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM BRANCH_DEPO;
    END IF;
END TRG_BRANCH_DEPO_PK;
/


DROP TRIGGER HRMS.TRG_COMPANY_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_COMPANY_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.COMPANY
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM COMPANY;
    END IF;
END TRG_COMPANY_PK;
/


DROP TRIGGER HRMS.TRG_DEPARTMENTS_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_departments_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.DEPARTMENTS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM departments;
    END IF;
END TRG_departments_PK;
/


DROP TRIGGER HRMS.TRG_DESIGCAT_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_desigcat_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.DESIGCAT
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM desigcat;
    END IF;
END TRG_desigcat_PK;
/


DROP TRIGGER HRMS.TRG_DESIG_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_desig_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.DESIGNATIONS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM designations;
    END IF;
END trg_desig_pk;
/


DROP TRIGGER HRMS.TRG_DISTRICT_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_district_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.DISTRICT
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM district;
    END IF;
END trg_district_pk;
/


DROP TRIGGER HRMS.TRG_DIVISION_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_division_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.DIVISION
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM division;
    END IF;
END trg_division_pk;
/


DROP TRIGGER HRMS.TRG_EMPLOYEES_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_EMPLOYEES_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMPLOYEES
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM employees;
    END IF;

    IF :NEW.is_same_add = 'Y'
    THEN
        :NEW.P_ADDRESS := :NEW.address;
        :NEW.p_post := :NEW.C_POST;
        :NEW.p_thana := :NEW.C_THANA;
        :NEW.p_district := :NEW.C_DISTRICT;
        :NEW.p_division := :NEW.C_DIVISION;
    END IF;
END TRG_EMPLOYEES_PK;
/


DROP TRIGGER HRMS.TRG_EMP_EDUCATION_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_EMP_EDUCATION_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMP_EDUCATION
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM emp_education;
    END IF;
END trg_emp_education_pk;
/


DROP TRIGGER HRMS.TRG_EMP_EXPERIENCE_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_EMP_EXPERIENCE_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMP_EXPERIENCE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_EXPERIENCE;
    END IF;
END TRG_EMP_EXPERIENCE_PK;
/


DROP TRIGGER HRMS.TRG_EMP_FAMILY_DTL_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_EMP_FAMILY_DTL_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMP_FAMILY_DTL
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_FAMILY_DTL;
    END IF;
END TRG_EMP_FAMILY_DTL_PK;
/


DROP TRIGGER HRMS.TRG_EMP_GUARANTORS_SAME_ADD;

CREATE OR REPLACE TRIGGER HRMS.trg_emp_guarantors_same_add
BEFORE INSERT OR UPDATE ON HRMS.EMP_GUARANTORS
FOR EACH ROW
BEGIN
  IF :NEW.is_same_add = 'Y' THEN
    :NEW.address     := :NEW.address2;
    :NEW.p_post      := :NEW.post;
    :NEW.p_thana     := :NEW.thana;
    :NEW.p_district  := :NEW.district;
    :NEW.p_division  := :NEW.division;
  END IF;
END;
/


DROP TRIGGER HRMS.TRG_EMP_NOMINEE_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_EMP_NOMINEE_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMP_NOMINEE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_NOMINEE;
    END IF;
END TRG_EMP_NOMINEE_PK;
/


DROP TRIGGER HRMS.TRG_EMP_TRAINING_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_EMP_TRAINING_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.EMP_TRAINING
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_TRAINING;
    END IF;
END TRG_EMP_TRAINING_PK;
/


DROP TRIGGER HRMS.TRG_EXAMS_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_exams_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.EXAMS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM exams;
    END IF;
END trg_exams_pk;
/


DROP TRIGGER HRMS.TRG_FIELD_STRUCTURE_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_FIELD_STRUCTURE_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.FIELD_STRUCTURE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM FIELD_STRUCTURE;
    END IF;
END TRG_FIELD_STRUCTURE_PK;
/


DROP TRIGGER HRMS.TRG_JOB_GRADES_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_job_grades_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.JOB_GRADES
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM job_grades;
    END IF;
END TRG_job_grades_PK;
/


DROP TRIGGER HRMS.TRG_LOCATIONS_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_LOCATIONS_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.LOCATIONS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM LOCATIONS;
    END IF;
END TRG_LOCATIONS_PK;
/


DROP TRIGGER HRMS.TRG_SUBJECTS_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_subjects_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.SUBJECTS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM subjects;
    END IF;
END trg_subjects_pk;
/


DROP TRIGGER HRMS.TRG_T_EMP_TYP_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_t_emp_typ_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.T_EMP_TYP
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_emp_typ;
    END IF;
END trg_t_emp_typ_pk;
/


DROP TRIGGER HRMS.TRG_T_GRADE_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_t_grade_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.T_GRADE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_grade;
    END IF;
END trg_t_grade_pk;
/


DROP TRIGGER HRMS.TRG_T_HOLIDAY_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_T_HOLIDAY_PK
    BEFORE INSERT OR UPDATE
    ON hrms.t_holiday
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_holiday;
    END IF;
END trg_t_holiday_pk;
/


DROP TRIGGER HRMS.TRG_T_SEP_TYP_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_T_sep_TYP_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.T_SEP_TYP
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM T_sep_TYP;
    END IF;
END trg_T_sep_TYP_pk;
/


DROP TRIGGER HRMS.TRG_T_STRUCTURE_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_T_STRUCTURE_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.t_structure
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_structure;
    END IF;
END trg_t_structure_pk;
/


DROP TRIGGER HRMS.TRG_UNIONS_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_UNIONS_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.UNIONS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM UNIONS;
    END IF;
END trg_UNIONS_pk;
/


DROP TRIGGER HRMS.TRG_UNITS_PK;

CREATE OR REPLACE TRIGGER HRMS.TRG_UNITS_PK
    BEFORE INSERT OR UPDATE
    ON HRMS.COM_UNIT
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM com_unit;
    END IF;
END TRG_UNITS_PK;
/


DROP TRIGGER HRMS.TRG_UPAZILA_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_upazila_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.UPAZILA
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM upazila;
    END IF;
END trg_upazila_pk;
/


DROP TRIGGER HRMS.TRG_USER_GROUP_PK;

CREATE OR REPLACE TRIGGER HRMS.trg_user_group_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.USER_GROUP
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM user_group;
    END IF;
END trg_user_group_pk;
/


DROP TRIGGER HRMS.T_GRADE_UPD;

CREATE OR REPLACE TRIGGER HRMS.t_grade_upd
    BEFORE UPDATE
    ON HRMS.T_GRADE
    FOR EACH ROW
BEGIN
    IF UPDATING
    THEN
        IF :new.gname IN ('GRADE-15',
                          'GRADE-16',
                          'GRADE-17',
                          'GRADE-18',
                          'GRADE-19',
                          'GRADE-20',
                          'NON GRADE',
                          'PRVN')
        THEN
            raise_application_error (-20001, 'Can not change record');
        END IF;
    END IF;
END;
/


DROP TRIGGER HRMS.T_T_MENU_PK_AUTO;

CREATE OR REPLACE TRIGGER HRMS.T_T_Menu_Pk_Auto
    Before Insert Or Update
    ON HRMS.T_MENU
    For Each Row
Begin
    If :New.Pid Is Null
    Then
        Select Nvl (Max (Pid), 0) + 1 Into :New.Pid From T_Menu;
    End If;
End T_T_Menu_Pk_Auto;
/


DROP TRIGGER HRMS.T_USERS_COMPANY_PK;

CREATE OR REPLACE TRIGGER HRMS.t_users_company_pk
    BEFORE INSERT OR UPDATE
    ON HRMS.USERS_COMPANY
    FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :NEW.id FROM USERS_COMPANY;
    END IF;
END t_users_company_pk;
/


DROP TRIGGER HRMS.T_USER_COMPANY_ASGN;

CREATE OR REPLACE TRIGGER HRMS.t_user_company_asgn
    AFTER INSERT
    ON HRMS.EMPLOYEES
    FOR EACH ROW
BEGIN
    INSERT INTO users_company (EMPID, com_id)
         VALUES (:new.id, 1);
END t_user_company_asgn;
/

DROP VIEW HRMS.V_AREA_STRUCT;

/* Formatted on 5/25/2025 12:33:54 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW HRMS.V_AREA_STRUCT
(
    ID,
    AREA_ID,
    AREA_NAME,
    PARENT_LEVEL_ID,
    PARENT_LEVEL_NAME,
    LEVEL0_ID,
    LEVEL0_NAME,
    LEVEL1_ID,
    LEVEL1_NAME,
    LEVEL2_ID,
    LEVEL2_NAME,
    LEVEL3_ID,
    LEVEL3_NAME,
    CREATED_ON,
    CREATED_BY,
    UPDATED_ON,
    UPDATED_BY,
    ORC_INSERT_DATE
)
BEQUEATH DEFINER
AS
    SELECT ID,
           AREA_ID,
           AREA_NAME,
           PARENT_LEVEL_ID,
           PARENT_LEVEL_NAME,
           LEVEL0_ID,
           LEVEL0_NAME,
           LEVEL1_ID,
           LEVEL1_NAME,
           LEVEL2_ID,
           LEVEL2_NAME,
           LEVEL3_ID,
           LEVEL3_NAME,
           CREATED_ON,
           CREATED_BY,
           UPDATED_ON,
           UPDATED_BY,
           ORC_INSERT_DATE
      FROM AREA_STRUCTURE@NewSales;


DROP VIEW HRMS.V_EMP_GU;

/* Formatted on 5/25/2025 12:33:54 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW HRMS.V_EMP_GU
(
    EMPCODE,
    GRNT_NM,
    GRNT_FATHER,
    GRNT_ADD1,
    GRNT_ADD2,
    GRNT_RELE,
    GRNT_NATIONALITY,
    GRNT_PROFFESSION,
    GRNT_BUSINES_ADD,
    GRNT_NID,
    GRNT_OFF_PHON,
    GRNT_PASSPORT_NO,
    GRNT_RES_PHONE,
    GRNT_MOBILE
)
BEQUEATH DEFINER
AS
    SELECT empcode,
           GRNT_NM,
           GRNT_FATHER,
           GRNT_ADD1,
           GRNT_ADD2,
           GRNT_RELE,
           GRNT_NATIONALITY,
           GRNT_PROFFESSION,
           GRNT_BUSINES_ADD,
           GRNT_NID,
           GRNT_OFF_PHON,
           GRNT_PASSPORT_NO,
           GRNT_RES_PHONE,
           GRNT_MOBILE
      FROM emp@ipihr
     WHERE emp_status = 'A' AND GRNT_NM IS NOT NULL;


DROP VIEW HRMS.V_GUARATOR;

/* Formatted on 5/25/2025 12:33:54 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW HRMS.V_GUARATOR
(
    EMP_ID,
    GNAME,
    GCO,
    REL,
    PROF,
    NID,
    MOBILE,
    PREADD,
    PERADD
)
BEQUEATH DEFINER
AS
    SELECT es.emp_id,
           es.NAME                      gname,
           GRNT_FATHER                  gco,
           RELATIONSHIP                 rel,
           GRNT_PROFFESSION             prof,
           GRNT_NID                     nid,
           CONTACT_DETAILS              mobile,
              'Area/Village: '
           || es.address2
           || ', Post Office: '
           || NVL (un.name, 'N/A')
           || ', Thana/Upazila: '
           || NVL (upz.name, 'N/A')
           || ', District: '
           || NVL (dis.name, 'N/A')
           || ', Division: '
           || NVL (div.name, 'N/A')     AS preadd,
              'Area/Village: '
           || es.address
           || ', Post Office: '
           || NVL (un1.name, 'N/A')
           || ', Thana/Upazila: '
           || NVL (upz1.name, 'N/A')
           || ', District: '
           || NVL (dis1.name, 'N/A')
           || ', Division: '
           || NVL (div1.name, 'N/A')    AS peradd
      FROM EMP_GUARANTORS  es,
           division        div,
           district        dis,
           upazila         upz,
           unions          un,
           division        div1,
           district        dis1,
           upazila         upz1,
           unions          un1
     WHERE     es.POST = un.id(+)
           AND es.thana = upz.id(+)
           AND es.district = dis.id(+)
           AND es.division = div.id(+)
           AND es.p_post = un1.id(+)
           AND es.p_thana = upz1.id(+)
           AND es.p_district = dis1.id(+)
           AND es.p_division = div1.id(+);


DROP VIEW HRMS.V_REP_AREA;

/* Formatted on 5/25/2025 12:33:54 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW HRMS.V_REP_AREA
(
    ID,
    REP_ID,
    NAME,
    REP_CATEGORY,
    AREA_ID,
    AREA_NAME,
    CREATED_ON,
    CREATED_BY,
    UPDATED_ON,
    UPDATED_BY,
    ORC_INSERT_DATE
)
BEQUEATH DEFINER
AS
    SELECT ID,
           REP_ID,
           NAME,
           REP_CATEGORY,
           AREA_ID,
           AREA_NAME,
           CREATED_ON,
           CREATED_BY,
           UPDATED_ON,
           UPDATED_BY,
           ORC_INSERT_DATE
      FROM REP_AREA@NewSales;


DROP VIEW HRMS.V_SUP_AREA;

/* Formatted on 5/25/2025 12:33:54 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW HRMS.V_SUP_AREA
(
    ID,
    SUP_ID,
    NAME,
    AREA_ID,
    AREA_NAME,
    LEVEL_DEPTH_NO,
    CREATED_ON,
    CREATED_BY,
    UPDATED_ON,
    UPDATED_BY,
    ORC_INSERT_DATE
)
BEQUEATH DEFINER
AS
    SELECT ID,
           SUP_ID,
           NAME,
           AREA_ID,
           AREA_NAME,
           LEVEL_DEPTH_NO,
           CREATED_ON,
           CREATED_BY,
           UPDATED_ON,
           UPDATED_BY,
           ORC_INSERT_DATE
      FROM SUP_AREA@NewSales;

/* Formatted on 5/5/2025 12:24:58 PM (QP5 v5.362) */
CREATE TABLE AREA_STRUCTURE
(
    ID                   NUMBER,
    AREA_ID              VARCHAR2 (20 BYTE) DEFAULT NULL,
    AREA_NAME            VARCHAR2 (50 BYTE) DEFAULT NULL,
    PARENT_LEVEL_ID      VARCHAR2 (20 BYTE) DEFAULT NULL,
    PARENT_LEVEL_NAME    VARCHAR2 (50 BYTE) DEFAULT NULL,
    LEVEL0_ID            VARCHAR2 (20 BYTE) DEFAULT NULL,
    LEVEL0_NAME          VARCHAR2 (50 BYTE) DEFAULT NULL,
    LEVEL1_ID            VARCHAR2 (20 BYTE) DEFAULT NULL,
    LEVEL1_NAME          VARCHAR2 (50 BYTE) DEFAULT NULL,
    LEVEL2_ID            VARCHAR2 (20 BYTE) DEFAULT NULL,
    LEVEL2_NAME          VARCHAR2 (50 BYTE) DEFAULT NULL,
    LEVEL3_ID            VARCHAR2 (100 BYTE) DEFAULT NULL,
    LEVEL3_NAME          VARCHAR2 (50 BYTE) DEFAULT NULL,
    CREATED_ON           TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    CREATED_BY           VARCHAR2 (30 BYTE),
    UPDATED_ON           TIMESTAMP (6) DEFAULT NULL,
    UPDATED_BY           VARCHAR2 (30 BYTE),
    ORC_INSERT_DATE      DATE
);

ALTER TABLE AREA_STRUCTURE
    ADD (PRIMARY KEY (ID));

CREATE TABLE BOARD_UNIVERSITY
(
    ID          NUMBER,
    SLNO        NUMBER,
    NAME        VARCHAR2 (300 BYTE),
    WEBSITE     VARCHAR2 (300 BYTE),
    TYP         VARCHAR2 (30 BYTE),
    CAT         VARCHAR2 (30 BYTE),
    ENT_BY      NUMBER,
    ENT_DATE    DATE,
    UPD_BY      NUMBER,
    UPD_DATE    DATE
);

ALTER TABLE BOARD_UNIVERSITY
    ADD (CONSTRAINT BOARD_UNIVERSITY_PK PRIMARY KEY (ID));

CREATE TABLE BRANCH_DEPO
(
    ID                NUMBER,
    CODE              VARCHAR2 (5 BYTE),
    NAME              VARCHAR2 (50 BYTE),
    ADDRESS           VARCHAR2 (100 BYTE),
    CONTACT_PERSON    NUMBER,
    PHONE             VARCHAR2 (30 BYTE),
    EMAIL             VARCHAR2 (30 BYTE),
    ENT_BY            NUMBER,
    ENT_DATE          DATE,
    UPD_BY            NUMBER,
    UPD_DATE          DATE,
    IS_DEPO           NUMBER (1)
);

ALTER TABLE BRANCH_DEPO
    ADD (CONSTRAINT BR_DEPOTS_PK PRIMARY KEY (ID),
         CONSTRAINT BR_DEPOTS_U01 UNIQUE (CODE));

CREATE TABLE COMPANY
(
    ID          NUMBER,
    CODE        VARCHAR2 (5 BYTE),
    NAME        VARCHAR2 (50 BYTE),
    ADDRESS     VARCHAR2 (100 BYTE),
    REG_NO      VARCHAR2 (30 BYTE),
    BIN         VARCHAR2 (30 BYTE),
    PHONE       VARCHAR2 (30 BYTE),
    EMAIL       VARCHAR2 (30 BYTE),
    ENT_BY      NUMBER,
    ENT_DATE    DATE,
    UPD_BY      NUMBER,
    UPD_DATE    DATE
);


ALTER TABLE COMPANY
    ADD (CONSTRAINT COMPANY_PK PRIMARY KEY (ID),
         CONSTRAINT COMPANY_U01 UNIQUE (CODE),
         CONSTRAINT COMPANY_U02 UNIQUE (BIN));


CREATE TABLE COM_UNIT
(
    ID          NUMBER,
    NAME        VARCHAR2 (50 BYTE),
    ADDRESS     VARCHAR2 (100 BYTE),
    PHONE       VARCHAR2 (30 BYTE),
    EMAIL       VARCHAR2 (30 BYTE),
    COM_ID      NUMBER,
    ENT_BY      NUMBER,
    ENT_DATE    DATE,
    UPD_BY      NUMBER,
    UPD_DATE    DATE
);


ALTER TABLE COM_UNIT
    ADD (CONSTRAINT UNITS_PK PRIMARY KEY (ID));


CREATE TABLE DEPARTMENTS
(
    ID           NUMBER,
    DEPT_NAME    VARCHAR2 (50 BYTE),
    ADDRESS      VARCHAR2 (100 BYTE),
    COM_ID       NUMBER,
    ENT_BY       NUMBER,
    ENT_DATE     DATE,
    UPD_BY       NUMBER,
    UPD_DATE     DATE
);



ALTER TABLE DEPARTMENTS
    ADD (CONSTRAINT DEPARTMENTS_PK PRIMARY KEY (ID));



CREATE TABLE DESIGCAT
(
    ID          NUMBER,
    CAT_NAME    VARCHAR2 (50 BYTE),
    CAT         VARCHAR2 (5 BYTE)
);


ALTER TABLE DESIGCAT
    ADD (PRIMARY KEY (ID), UNIQUE (CAT));


CREATE TABLE DESIGNATIONS
(
    ID             NUMBER,
    REFNO          VARCHAR2 (30 BYTE),
    REFDATE        DATE,
    CODE           VARCHAR2 (30 BYTE),
    DESIGNATION    VARCHAR2 (100 BYTE),
    ENT_BY         NUMBER,
    ENT_DATE       DATE,
    UPD_BY         NUMBER,
    UPD_DATE       DATE,
    CATA           VARCHAR2 (5 BYTE)
);


ALTER TABLE DESIGNATIONS
    ADD (CONSTRAINT DESIGNATIONS_PK PRIMARY KEY (ID));


CREATE TABLE DIVISION
(
    ID         NUMBER,
    NAME       VARCHAR2 (100 BYTE) NOT NULL,
    BN_NAME    VARCHAR2 (100 BYTE),
    URL        VARCHAR2 (100 BYTE)
);



ALTER TABLE DIVISION
    ADD (CONSTRAINT DIVISION_PK PRIMARY KEY (ID));


CREATE TABLE EMP
(
    EMPNO       NUMBER (4) NOT NULL,
    ENAME       VARCHAR2 (10 BYTE),
    JOB         VARCHAR2 (9 BYTE),
    MGR         NUMBER (4),
    HIREDATE    DATE,
    SAL         NUMBER (7, 2),
    COMM        NUMBER (7, 2),
    DEPTNO      NUMBER (2)
);


ALTER TABLE EMP
    ADD (PRIMARY KEY (EMPNO));


CREATE TABLE EMP_EXPERIENCE
(
    ID              NUMBER,
    EMP_ID          NUMBER,
    COMPANY_NAME    VARCHAR2 (100 BYTE),
    JOB_TITLE       VARCHAR2 (100 BYTE),
    JOB_DES         VARCHAR2 (100 BYTE),
    START_DATE      DATE,
    END_DATE        DATE,
    DURATION        VARCHAR2 (100 BYTE),
    REMARKS         VARCHAR2 (100 BYTE),
    ENT_BY          NUMBER,
    ENT_DATE        DATE,
    UPD_BY          NUMBER,
    UPD_DATE        DATE,
    MIME_TYPE       VARCHAR2 (200 BYTE),
    FILE_NAME       VARCHAR2 (200 BYTE),
    UPD_AT          DATE DEFAULT SYSDATE,
    ATTACHMENT      BLOB
);



ALTER TABLE EMP_EXPERIENCE
    ADD (CONSTRAINT PK_EMP_ID_EXPERIENCE PRIMARY KEY (ID));


CREATE TABLE EMP_FAMILY_DTL
(
    ID          NUMBER,
    EMP_ID      NUMBER,
    RELATION    VARCHAR2 (100 BYTE),
    NAME        VARCHAR2 (100 BYTE),
    REMARKS     VARCHAR2 (100 BYTE),
    ENT_BY      NUMBER,
    ENT_DATE    DATE,
    UPD_BY      NUMBER,
    UPD_DATE    DATE,
    DOB         DATE,
    AGE         VARCHAR2 (50 BYTE),
    CONTACT     VARCHAR2 (50 BYTE)
);


ALTER TABLE EMP_FAMILY_DTL
    ADD (CONSTRAINT PK_EMP_FAMILY_DTL PRIMARY KEY (ID));


CREATE TABLE EMP_GUARANTORS
(
    ID                  NUMBER,
    EMP_ID              NUMBER,
    NAME                VARCHAR2 (100 BYTE),
    RELATIONSHIP        VARCHAR2 (100 BYTE),
    CONTACT_DETAILS     VARCHAR2 (255 BYTE),
    ADDRESS             VARCHAR2 (100 BYTE),
    P_POST              NUMBER,
    P_THANA             NUMBER,
    P_DISTRICT          NUMBER,
    P_DIVISION          NUMBER,
    EMPCODE             VARCHAR2 (150 BYTE),
    GRNT_NM             VARCHAR2 (150 BYTE),
    GRNT_FATHER         VARCHAR2 (150 BYTE),
    GRNT_ADD1           VARCHAR2 (300 BYTE),
    GRNT_ADD2           VARCHAR2 (300 BYTE),
    GRNT_RELE           VARCHAR2 (150 BYTE),
    GRNT_NATIONALITY    VARCHAR2 (45 BYTE),
    GRNT_PROFFESSION    VARCHAR2 (30 BYTE),
    GRNT_BUSINES_ADD    VARCHAR2 (300 BYTE),
    GRNT_NID            VARCHAR2 (90 BYTE),
    GRNT_OFF_PHON       VARCHAR2 (60 BYTE),
    GRNT_PASSPORT_NO    VARCHAR2 (150 BYTE),
    GRNT_RES_PHONE      VARCHAR2 (60 BYTE),
    GRNT_MOBILE         VARCHAR2 (150 BYTE),
    REMARKS             VARCHAR2 (100 BYTE),
    ENT_BY              NUMBER,
    ENT_DATE            DATE,
    UPD_BY              NUMBER,
    UPD_DATE            DATE
);


CREATE TABLE EMP_NOMINEE
(
    ID                 NUMBER,
    EMP_ID             NUMBER,
    NOMINEE_NAME       VARCHAR2 (100 BYTE),
    RELATIONSHIP       VARCHAR2 (100 BYTE),
    CONTACT_DETAILS    VARCHAR2 (255 BYTE),
    ADDRESS            VARCHAR2 (100 BYTE),
    P_POST             NUMBER,
    P_THANA            NUMBER,
    P_DISTRICT         NUMBER,
    P_DIVISION         NUMBER,
    REMARKS            VARCHAR2 (100 BYTE),
    NID                VARCHAR2 (30 BYTE),
    DOB                DATE,
    PRC                NUMBER,
    PIC                BLOB,
    NIDA               BLOB,
    ACN                BLOB,
    ENT_BY             NUMBER,
    ENT_DATE           DATE,
    UPD_BY             NUMBER,
    UPD_DATE           DATE
);

ALTER TABLE EMP_NOMINEE
    ADD (CONSTRAINT PK_EMP_NOMINEE PRIMARY KEY (ID));


CREATE TABLE EMP_TRAINING
(
    ID                 NUMBER,
    EMP_ID             NUMBER,
    TRAINING_NAME      VARCHAR2 (100 BYTE),
    INSTITUTION        VARCHAR2 (100 BYTE),
    START_DATE         DATE,
    COMPLETION_DATE    DATE,
    DURATION           VARCHAR2 (100 BYTE),
    REMARKS            VARCHAR2 (100 BYTE),
    ENT_BY             NUMBER,
    ENT_DATE           DATE,
    UPD_BY             NUMBER,
    UPD_DATE           DATE,
    MIME_TYPE          VARCHAR2 (200 BYTE),
    FILE_NAME          VARCHAR2 (200 BYTE),
    UPD_AT             DATE DEFAULT SYSDATE,
    ATTACHMENT         BLOB,
    RESULT             VARCHAR2 (30 BYTE),
    SESS               VARCHAR2 (30 BYTE)
);



ALTER TABLE EMP_TRAINING
    ADD (CONSTRAINT PK_EMP_TRAINING PRIMARY KEY (ID));


CREATE TABLE EXAMS
(
    ID          NUMBER,
    NAME        VARCHAR2 (100 BYTE),
    ENT_BY      NUMBER,
    ENT_DATE    DATE,
    UPD_BY      NUMBER,
    UPD_DATE    DATE
);

ALTER TABLE EXAMS
    ADD (CONSTRAINT EXAMS_PK PRIMARY KEY (ID),
         CONSTRAINT EXAMS_U01 UNIQUE (NAME));


CREATE TABLE FIELD_STRUCTURE
(
    ID             NUMBER,
    STR_ID         VARCHAR2 (20 BYTE),
    STR_NAME       VARCHAR2 (50 BYTE),
    PARENT_ID      VARCHAR2 (20 BYTE),
    PARENT_NAME    VARCHAR2 (50 BYTE),
    REG_ID         VARCHAR2 (20 BYTE),
    REGION         VARCHAR2 (50 BYTE),
    ZONE_ID        VARCHAR2 (20 BYTE),
    ZONES          VARCHAR2 (50 BYTE),
    ARR_ID         VARCHAR2 (20 BYTE),
    AREA           VARCHAR2 (50 BYTE),
    TERR_ID        VARCHAR2 (100 BYTE),
    TERRITORY      VARCHAR2 (50 BYTE),
    TYP            VARCHAR2 (10 BYTE),
    ENT_BY         NUMBER,
    ENT_DATE       DATE,
    UPD_BY         NUMBER,
    UPD_DATE       DATE,
    STATUS         VARCHAR2 (10 BYTE),
    OLD_ID         NUMBER,
    IS_COST        VARCHAR2 (3 BYTE),
    COM_ID         NUMBER,
    P_ID           NUMBER
);

ALTER TABLE FIELD_STRUCTURE
    ADD (CONSTRAINT FIELD_STRUCTURE_PK PRIMARY KEY (ID));


CREATE TABLE HR_EMPFAMILYDET
(
    SLNO          NUMBER,
    EMPCODE       VARCHAR2 (50 BYTE),
    FAMILYDES     VARCHAR2 (50 BYTE),
    FNAME         VARCHAR2 (100 BYTE),
    F_AGE         VARCHAR2 (30 BYTE),
    F_OCUP        VARCHAR2 (70 BYTE),
    F_ADD         VARCHAR2 (100 BYTE),
    PHONE         VARCHAR2 (25 BYTE),
    CHILD_NOS     NUMBER,
    BIRTH_DATE    DATE,
    USERNAME      VARCHAR2 (100 BYTE)
);


CREATE TABLE HTMLDB_PLAN_TABLE
(
    STATEMENT_ID         VARCHAR2 (30 BYTE),
    PLAN_ID              NUMBER,
    TIMESTAMP            DATE,
    REMARKS              VARCHAR2 (4000 BYTE),
    OPERATION            VARCHAR2 (30 BYTE),
    OPTIONS              VARCHAR2 (255 BYTE),
    OBJECT_NODE          VARCHAR2 (128 BYTE),
    OBJECT_OWNER         VARCHAR2 (128 BYTE),
    OBJECT_NAME          VARCHAR2 (128 BYTE),
    OBJECT_ALIAS         VARCHAR2 (261 BYTE),
    OBJECT_INSTANCE      INTEGER,
    OBJECT_TYPE          VARCHAR2 (128 BYTE),
    OPTIMIZER            VARCHAR2 (255 BYTE),
    SEARCH_COLUMNS       NUMBER,
    ID                   INTEGER,
    PARENT_ID            INTEGER,
    DEPTH                INTEGER,
    POSITION             INTEGER,
    COST                 INTEGER,
    CARDINALITY          INTEGER,
    BYTES                INTEGER,
    OTHER_TAG            VARCHAR2 (255 BYTE),
    PARTITION_START      VARCHAR2 (255 BYTE),
    PARTITION_STOP       VARCHAR2 (255 BYTE),
    PARTITION_ID         INTEGER,
    OTHER                LONG,
    DISTRIBUTION         VARCHAR2 (30 BYTE),
    CPU_COST             INTEGER,
    IO_COST              INTEGER,
    TEMP_SPACE           INTEGER,
    ACCESS_PREDICATES    VARCHAR2 (4000 BYTE),
    FILTER_PREDICATES    VARCHAR2 (4000 BYTE),
    PROJECTION           VARCHAR2 (4000 BYTE),
    TIME                 INTEGER,
    QBLOCK_NAME          VARCHAR2 (128 BYTE)
);

CREATE TABLE JOB_GRADES
(
    ID             NUMBER,
    GRADE_NAME     VARCHAR2 (100 BYTE),
    MIN_SALARY     NUMBER,
    MAX_SALARY     NUMBER,
    DESCRIPTION    VARCHAR2 (255 BYTE),
    ENT_DATE       DATE DEFAULT SYSDATE,
    UPD_DATE       DATE,
    ENT_BY         NUMBER,
    UPD_BY         NUMBER
);


ALTER TABLE JOB_GRADES
    ADD (PRIMARY KEY (ID));


CREATE TABLE LOCATIONS
(
    ID          NUMBER,
    NAME        VARCHAR2 (50 BYTE),
    ADDRESS     VARCHAR2 (100 BYTE),
    PHONE       VARCHAR2 (30 BYTE),
    EMAIL       VARCHAR2 (30 BYTE),
    COM_ID      NUMBER,
    ENT_BY      NUMBER,
    ENT_DATE    DATE,
    UPD_BY      NUMBER,
    UPD_DATE    DATE
);



ALTER TABLE LOCATIONS
    ADD (CONSTRAINT LOCATIONS_PK PRIMARY KEY (ID));


CREATE TABLE RELATIONS
(
    ID       NUMBER,
    RNAME    VARCHAR2 (50 BYTE),
    RTYPE    VARCHAR2 (20 BYTE)
);


ALTER TABLE RELATIONS
    ADD (PRIMARY KEY (ID));


CREATE TABLE REP_AREA
(
    ID                 NUMBER,
    REP_ID             VARCHAR2 (20 BYTE),
    NAME               VARCHAR2 (50 BYTE),
    REP_CATEGORY       VARCHAR2 (20 BYTE),
    AREA_ID            VARCHAR2 (20 BYTE),
    AREA_NAME          VARCHAR2 (50 BYTE),
    CREATED_ON         TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    CREATED_BY         VARCHAR2 (30 BYTE),
    UPDATED_ON         TIMESTAMP (6),
    UPDATED_BY         VARCHAR2 (30 BYTE),
    ORC_INSERT_DATE    DATE
);


ALTER TABLE REP_AREA
    ADD (PRIMARY KEY (ID));


CREATE TABLE SUBJECTS
(
    ID          NUMBER,
    NAME        VARCHAR2 (100 BYTE),
    ENT_BY      NUMBER,
    ENT_DATE    DATE,
    UPD_BY      NUMBER,
    UPD_DATE    DATE
);

ALTER TABLE SUBJECTS
    ADD (CONSTRAINT SUBJECTS_PK PRIMARY KEY (ID));


CREATE TABLE SUP_AREA
(
    ID                 NUMBER,
    SUP_ID             VARCHAR2 (20 BYTE),
    NAME               VARCHAR2 (50 BYTE),
    AREA_ID            VARCHAR2 (20 BYTE),
    AREA_NAME          VARCHAR2 (50 BYTE),
    LEVEL_DEPTH_NO     NUMBER (2),
    CREATED_ON         TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    CREATED_BY         VARCHAR2 (30 BYTE),
    UPDATED_ON         TIMESTAMP (6),
    UPDATED_BY         VARCHAR2 (30 BYTE),
    ORC_INSERT_DATE    DATE
);


ALTER TABLE SUP_AREA
    ADD (PRIMARY KEY (ID));


CREATE TABLE T_EMP_TYP
(
    ID             NUMBER,
    ETYPE          VARCHAR2 (100 BYTE),
    DESCRIPTION    VARCHAR2 (100 BYTE),
    ENT_BY         NUMBER,
    ENT_DATE       DATE DEFAULT SYSDATE,
    UPD_BY         NUMBER,
    UPD_DATE       DATE
);


ALTER TABLE T_EMP_TYP
    ADD (CONSTRAINT PK_T_EMP_TYP PRIMARY KEY (ID));


CREATE TABLE T_GRADE
(
    ID           NUMBER,
    GNAME        VARCHAR2 (30 BYTE),
    GDESC        VARCHAR2 (100 BYTE),
    REFDATE      DATE,
    BASICS       NUMBER (20, 2),
    INCRRATE     NUMBER (10, 2),
    EBRATE       NUMBER,
    HR           NUMBER,
    CONV         NUMBER,
    MEDICAL      NUMBER,
    ALLOWANCE    NUMBER,
    CPF          NUMBER,
    PF           NUMBER,
    SAF          NUMBER,
    REF_RATE     NUMBER,
    REF_HOL      NUMBER,
    STATUS       VARCHAR2 (10 BYTE),
    ENT_BY       NUMBER,
    ENT_DATE     DATE,
    UPD_BY       NUMBER,
    UPD_DATE     DATE
);


CREATE TABLE T_HOLIDAY
(
    ID              NUMBER,
    HOLIDAY_NAME    VARCHAR2 (100 BYTE) NOT NULL,
    LOC_ID          NUMBER,
    HOLIDAY_DATE    DATE NOT NULL,
    IS_RECURRING    NUMBER (1) DEFAULT 0,
    YEAR            NUMBER,
    DESCRIPTION     VARCHAR2 (255 BYTE),
    COM_ID          NUMBER,
    ENT_BY          NUMBER,
    ENT_DATE        DATE,
    UPD_BY          NUMBER,
    UPD_DATE        DATE
);


ALTER TABLE T_HOLIDAY
    ADD (PRIMARY KEY (ID));


CREATE TABLE T_MENU
(
    PID                 NUMBER NOT NULL,
    PARENT_PID          NUMBER,
    MENU_NAME           NVARCHAR2 (100),
    MENU_LINK           NVARCHAR2 (200),
    STATUS              NVARCHAR2 (1),
    DESCRIPTION         NVARCHAR2 (200),
    SORT_BY             NUMBER,
    ENT_BY              NUMBER,
    UPD_BY              NUMBER,
    ENT_DATE            DATE DEFAULT SYSDATE,
    UPD_DATE            DATE,
    ICON_IMG            VARCHAR2 (250 BYTE),
    MENU_NAME_BANGLA    VARCHAR2 (250 BYTE)
);



ALTER TABLE T_MENU
    ADD (CONSTRAINT T_MENU_C01 CHECK (parent_pid <> pid),
         CONSTRAINT T_MENU_CON_PK PRIMARY KEY (PID));


CREATE TABLE T_SEP_TYP
(
    ID             NUMBER,
    ETYPE          VARCHAR2 (100 BYTE),
    DESCRIPTION    VARCHAR2 (100 BYTE),
    ENT_BY         NUMBER,
    ENT_DATE       DATE DEFAULT SYSDATE,
    UPD_BY         NUMBER,
    UPD_DATE       DATE
);



ALTER TABLE T_SEP_TYP
    ADD (CONSTRAINT PK_T_SEP_TYP PRIMARY KEY (ID));


CREATE TABLE T_STATUS
(
    ID        NUMBER (1),
    STATUS    VARCHAR2 (30 BYTE)
);


ALTER TABLE T_STATUS
    ADD (CONSTRAINT T_STATUS_PK PRIMARY KEY (ID));


CREATE TABLE T_STRUCTURE
(
    ID           NUMBER,
    STR_NAME     VARCHAR2 (100 BYTE),
    STR_TYPE     VARCHAR2 (20 BYTE),
    CODE         VARCHAR2 (100 BYTE),
    PARENT_ID    NUMBER,
    DEPT_ID      NUMBER,
    COMP_ID      NUMBER,
    UNIT         NUMBER,
    STATUS       VARCHAR2 (20 BYTE),
    ENT_BY       NUMBER,
    ENT_DATE     DATE DEFAULT SYSDATE,
    UPD_BY       NUMBER,
    UPD_DATE     DATE
);

ALTER TABLE T_STRUCTURE
    ADD (CONSTRAINT T_STRUCTURE_PK PRIMARY KEY (ID));


CREATE TABLE USERS_COMPANY
(
    ID        NUMBER,
    COM_ID    NUMBER,
    EMPID     NUMBER
);

ALTER TABLE USERS_COMPANY
    ADD (CONSTRAINT USERS_COMPANY_PK PRIMARY KEY (ID),
         CONSTRAINT CM_SYS_USERS_COM_R03 UNIQUE (COM_ID, EMPID));


CREATE TABLE USER_GROUP
(
    ID            NUMBER,
    GROUP_NAME    VARCHAR2 (50 BYTE),
    ENT_BY        NUMBER,
    ENT_DATE      DATE,
    UPD_BY        NUMBER,
    UPD_DATE      DATE
);

ALTER TABLE USER_GROUP
    ADD (CONSTRAINT USER_GROUP_PK PRIMARY KEY (ID));

CREATE TABLE USER_MENU
(
    PID           NUMBER NOT NULL,
    PID_GROUP     NUMBER NOT NULL,
    PAGE_ID       NUMBER,
    PERMISSION    NUMBER (1) DEFAULT 1
);

ALTER TABLE USER_MENU
    ADD (CONSTRAINT C_USER_MENU_PK PRIMARY KEY (PID),
         CONSTRAINT C_USER_MENU_U01 UNIQUE (PID_GROUP, PAGE_ID));
/



CREATE OR REPLACE TRIGGER TRG_BRANCH_DEPO_PK
    BEFORE INSERT OR UPDATE
    ON BRANCH_DEPO
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM BRANCH_DEPO;
    END IF;
END TRG_BRANCH_DEPO_PK;
/


CREATE OR REPLACE TRIGGER TRG_COMPANY_PK
    BEFORE INSERT OR UPDATE
    ON COMPANY
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM COMPANY;
    END IF;
END TRG_COMPANY_PK;
/


CREATE OR REPLACE TRIGGER TRG_departments_PK
    BEFORE INSERT OR UPDATE
    ON DEPARTMENTS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM departments;
    END IF;
END TRG_departments_PK;
/


CREATE OR REPLACE TRIGGER TRG_desigcat_PK
    BEFORE INSERT OR UPDATE
    ON DESIGCAT
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM desigcat;
    END IF;
END TRG_desigcat_PK;
/


CREATE OR REPLACE TRIGGER trg_desig_pk
    BEFORE INSERT OR UPDATE
    ON DESIGNATIONS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM designations;
    END IF;
END trg_desig_pk;
/


CREATE OR REPLACE TRIGGER trg_division_pk
    BEFORE INSERT OR UPDATE
    ON DIVISION
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM division;
    END IF;
END trg_division_pk;
/


CREATE OR REPLACE TRIGGER TRG_EMP_EXPERIENCE_PK
    BEFORE INSERT OR UPDATE
    ON EMP_EXPERIENCE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_EXPERIENCE;
    END IF;
END TRG_EMP_EXPERIENCE_PK;
/


CREATE OR REPLACE TRIGGER TRG_EMP_FAMILY_DTL_PK
    BEFORE INSERT OR UPDATE
    ON EMP_FAMILY_DTL
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_FAMILY_DTL;
    END IF;
END TRG_EMP_FAMILY_DTL_PK;
/


CREATE OR REPLACE TRIGGER TRG_EMP_NOMINEE_PK
    BEFORE INSERT OR UPDATE
    ON EMP_NOMINEE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_NOMINEE;
    END IF;
END TRG_EMP_NOMINEE_PK;
/


CREATE OR REPLACE TRIGGER TRG_EMP_TRAINING_PK
    BEFORE INSERT OR UPDATE
    ON EMP_TRAINING
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM EMP_TRAINING;
    END IF;
END TRG_EMP_TRAINING_PK;
/


CREATE OR REPLACE TRIGGER trg_exams_pk
    BEFORE INSERT OR UPDATE
    ON EXAMS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM exams;
    END IF;
END trg_exams_pk;
/


CREATE OR REPLACE TRIGGER TRG_FIELD_STRUCTURE_PK
    BEFORE INSERT OR UPDATE
    ON FIELD_STRUCTURE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM FIELD_STRUCTURE;
    END IF;
END TRG_FIELD_STRUCTURE_PK;
/


CREATE OR REPLACE TRIGGER TRG_job_grades_PK
    BEFORE INSERT OR UPDATE
    ON JOB_GRADES
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM job_grades;
    END IF;
END TRG_job_grades_PK;
/


CREATE OR REPLACE TRIGGER TRG_LOCATIONS_PK
    BEFORE INSERT OR UPDATE
    ON LOCATIONS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM LOCATIONS;
    END IF;
END TRG_LOCATIONS_PK;
/


CREATE OR REPLACE TRIGGER trg_subjects_pk
    BEFORE INSERT OR UPDATE
    ON SUBJECTS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM subjects;
    END IF;
END trg_subjects_pk;
/


CREATE OR REPLACE TRIGGER trg_t_emp_typ_pk
    BEFORE INSERT OR UPDATE
    ON T_EMP_TYP
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_emp_typ;
    END IF;
END trg_t_emp_typ_pk;
/


CREATE OR REPLACE TRIGGER trg_t_grade_pk
    BEFORE INSERT OR UPDATE
    ON T_GRADE
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_grade;
    END IF;
END trg_t_grade_pk;
/


CREATE OR REPLACE TRIGGER TRG_T_HOLIDAY_PK
    BEFORE INSERT OR UPDATE
    ON t_holiday
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_holiday;
    END IF;
END trg_t_holiday_pk;
/


CREATE OR REPLACE TRIGGER trg_T_sep_TYP_pk
    BEFORE INSERT OR UPDATE
    ON T_SEP_TYP
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM T_sep_TYP;
    END IF;
END trg_T_sep_TYP_pk;
/


CREATE OR REPLACE TRIGGER TRG_T_STRUCTURE_PK
    BEFORE INSERT OR UPDATE
    ON t_structure
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM t_structure;
    END IF;
END trg_t_structure_pk;
/


CREATE OR REPLACE TRIGGER TRG_UNITS_PK
    BEFORE INSERT OR UPDATE
    ON COM_UNIT
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM com_unit;
    END IF;
END TRG_UNITS_PK;
/


CREATE OR REPLACE TRIGGER trg_user_group_pk
    BEFORE INSERT OR UPDATE
    ON USER_GROUP
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM user_group;
    END IF;
END trg_user_group_pk;
/


CREATE OR REPLACE TRIGGER t_grade_upd
    BEFORE UPDATE
    ON T_GRADE
    FOR EACH ROW
BEGIN
    IF UPDATING
    THEN
        IF :new.gname IN ('GRADE-15',
                          'GRADE-16',
                          'GRADE-17',
                          'GRADE-18',
                          'GRADE-19',
                          'GRADE-20',
                          'NON GRADE',
                          'PRVN')
        THEN
            raise_application_error (-20001, 'Can not change record');
        END IF;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER T_T_Menu_Pk_Auto
    BEFORE INSERT OR UPDATE
    ON T_MENU
    FOR EACH ROW
BEGIN
    IF :New.Pid IS NULL
    THEN
        SELECT NVL (MAX (Pid), 0) + 1 INTO :New.Pid FROM T_Menu;
    END IF;
END T_T_Menu_Pk_Auto;
/


CREATE OR REPLACE TRIGGER t_users_company_pk
    BEFORE INSERT OR UPDATE
    ON USERS_COMPANY
    FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :NEW.id FROM USERS_COMPANY;
    END IF;
END t_users_company_pk;
/


CREATE TABLE DISTRICT
(
    ID             NUMBER,
    DIVISION_ID    NUMBER,
    NAME           VARCHAR2 (250 BYTE),
    BN_NAME        VARCHAR2 (250 BYTE),
    LAT            VARCHAR2 (150 BYTE),
    LON            VARCHAR2 (150 BYTE),
    URL            VARCHAR2 (150 BYTE)
);



ALTER TABLE DISTRICT
    ADD (CONSTRAINT DISTRICT_PK PRIMARY KEY (ID));


CREATE TABLE EMPLOYEES
(
    ID                 NUMBER,
    EMP_ID             VARCHAR2 (30 BYTE),
    F_NAME             VARCHAR2 (30 BYTE),
    L_NAME             VARCHAR2 (30 BYTE),
    DOB                DATE,
    MOBILE             VARCHAR2 (30 BYTE),
    EMAIL              VARCHAR2 (50 BYTE),
    FATHER             VARCHAR2 (50 BYTE),
    MOTHER             VARCHAR2 (50 BYTE),
    GENDER             VARCHAR2 (10 BYTE),
    HEIGHT             VARCHAR2 (30 BYTE),
    WEIGHT             VARCHAR2 (30 BYTE),
    BLOOD              VARCHAR2 (10 BYTE),
    NID                VARCHAR2 (30 BYTE),
    ADDRESS            VARCHAR2 (300 BYTE),
    C_POST             NUMBER,
    C_THANA            NUMBER,
    C_DISTRICT         NUMBER,
    C_DIVISION         NUMBER,
    P_ADDRESS          VARCHAR2 (300 BYTE),
    P_POST             NUMBER,
    P_THANA            NUMBER,
    P_DISTRICT         NUMBER,
    P_DIVISION         NUMBER,
    PHOTO              BLOB,
    JOIN_DATE          DATE,
    MARITAL_STATUS     VARCHAR2 (10 BYTE),
    EMP_TYPE           VARCHAR2 (30 BYTE),
    DEPT_ID            NUMBER,
    LOC_ID             NUMBER,
    BRANCH_ID          NUMBER,
    DESIG_ID           NUMBER,
    COM_ID             NUMBER,
    JOB_ID             NUMBER,
    USER_GRP           NUMBER (3) DEFAULT 0,
    PASSW              VARCHAR2 (32 BYTE),
    ENT_BY             NUMBER,
    ENT_DATE           DATE,
    UPD_BY             NUMBER,
    UPD_DATE           DATE,
    STATUS             NUMBER,
    MIME_TYPE          VARCHAR2 (200 BYTE),
    FILE_NAME          VARCHAR2 (200 BYTE),
    EMPNO              VARCHAR2 (15 BYTE),
    RELIGION           VARCHAR2 (30 BYTE),
    ATT_DEV_ID         NUMBER (30),
    SECTION_ID         NUMBER,
    MC_ID              NUMBER,
    STR_ID             NUMBER,
    EMPID              NUMBER,
    RETIREMENT_DATE    DATE
);



ALTER TABLE EMPLOYEES
    ADD (CONSTRAINT PK_EMPLOYESS PRIMARY KEY (ID),
         CONSTRAINT EMPLOYEES_U01 UNIQUE (MC_ID),
         CONSTRAINT EMPLOYESS_U01 UNIQUE (EMP_ID),
         CONSTRAINT EMPLOYESS_U02 UNIQUE (EMAIL),
         CONSTRAINT EMPLOYESS_U03 UNIQUE (NID));


CREATE TABLE EMP_EDUCATION
(
    ID              NUMBER,
    EMP_ID          NUMBER,
    EXAM            NUMBER,
    SUB_GROUP       NUMBER,
    PASSING_YEAR    NUMBER (4),
    DURATION        NUMBER,
    BOARD           NUMBER,
    REMARKS         VARCHAR2 (100 BYTE),
    ENT_BY          NUMBER,
    ENT_DATE        DATE,
    UPD_BY          NUMBER,
    UPD_DATE        DATE,
    MIME_TYPE       VARCHAR2 (200 BYTE),
    FILE_NAME       VARCHAR2 (200 BYTE),
    UPD_AT          DATE DEFAULT SYSDATE,
    ATTACHMENT      BLOB,
    SLNO            NUMBER,
    EMPCODE         VARCHAR2 (50 BYTE),
    EXAMGROUP       VARCHAR2 (70 BYTE),
    BOARD_N         VARCHAR2 (100 BYTE),
    CLAS            VARCHAR2 (30 BYTE),
    PASSYEAR        VARCHAR2 (10 BYTE),
    INSTITUTE       VARCHAR2 (50 BYTE),
    SUBJECT_NAME    VARCHAR2 (200 BYTE),
    EXAMNAME        VARCHAR2 (70 BYTE),
    BACHELORS       VARCHAR2 (200 BYTE),
    CGPA            VARCHAR2 (30 BYTE)
);



ALTER TABLE EMP_EDUCATION
    ADD (CONSTRAINT PK_EMP_EDUCATION PRIMARY KEY (ID));


CREATE TABLE UPAZILA
(
    ID             NUMBER (10),
    DISTRICT_ID    NUMBER (10),
    NAME           VARCHAR2 (250 BYTE),
    BN_NAME        VARCHAR2 (205 BYTE),
    URL            VARCHAR2 (150 BYTE)
);



ALTER TABLE UPAZILA
    ADD (CONSTRAINT UPAZILA_PK PRIMARY KEY (ID));


CREATE OR REPLACE TRIGGER trg_district_pk
    BEFORE INSERT OR UPDATE
    ON DISTRICT
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM district;
    END IF;
END trg_district_pk;
/

CREATE OR REPLACE TRIGGER TRG_EMPLOYEES_PK
    BEFORE INSERT OR UPDATE
    ON EMPLOYEES
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM employees;
    END IF;
END TRG_EMPLOYEES_PK;
/


CREATE OR REPLACE TRIGGER TRG_EMP_EDUCATION_PK
    BEFORE INSERT OR UPDATE
    ON EMP_EDUCATION
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM emp_education;
    END IF;
END trg_emp_education_pk;
/


CREATE OR REPLACE TRIGGER trg_upazila_pk
    BEFORE INSERT OR UPDATE
    ON UPAZILA
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM upazila;
    END IF;
END trg_upazila_pk;
/


CREATE OR REPLACE TRIGGER t_user_company_asgn
    AFTER INSERT
    ON EMPLOYEES
    FOR EACH ROW
BEGIN
    INSERT INTO users_company (EMPID, com_id)
         VALUES (:new.id, 1);
END t_user_company_asgn;
/


CREATE TABLE UNIONS
(
    ID             NUMBER (10),
    UPAZILLA_ID    NUMBER (10),
    NAME           VARCHAR2 (250 BYTE),
    BN_NAME        VARCHAR2 (250 BYTE),
    URL            VARCHAR2 (150 BYTE)
);



ALTER TABLE UNIONS
    ADD (CONSTRAINT UNIONS_PK PRIMARY KEY (ID));


CREATE OR REPLACE TRIGGER trg_UNIONS_pk
    BEFORE INSERT OR UPDATE
    ON UNIONS
    FOR EACH ROW
BEGIN
    IF :new.id IS NULL
    THEN
        SELECT NVL (MAX (id), 0) + 1 INTO :new.id FROM UNIONS;
    END IF;
END trg_UNIONS_pk;
/

ALTER TABLE EMP_EXPERIENCE
    ADD (
        CONSTRAINT FK_EMP_ID_EXPERIENCE FOREIGN KEY (EMP_ID)
            REFERENCES EMPLOYEES (ID));

ALTER TABLE EMP_FAMILY_DTL
    ADD (
        CONSTRAINT FK_EMP_ID_FAMILY_DTL FOREIGN KEY (EMP_ID)
            REFERENCES EMPLOYEES (ID));

ALTER TABLE EMP_NOMINEE
    ADD (
        CONSTRAINT FK_EMP_ID_NOMINEE FOREIGN KEY (EMP_ID)
            REFERENCES EMPLOYEES (ID));

ALTER TABLE EMP_TRAINING
    ADD (
        CONSTRAINT FK_EMP_ID_TRAINING FOREIGN KEY (EMP_ID)
            REFERENCES EMPLOYEES (ID));

ALTER TABLE T_HOLIDAY
    ADD (
        CONSTRAINT FK_BRANCH_DEPO FOREIGN KEY (LOC_ID)
            REFERENCES BRANCH_DEPO (ID) ON DELETE CASCADE);

ALTER TABLE T_MENU
    ADD (
        CONSTRAINT T_MENU_CON FOREIGN KEY (PARENT_PID)
            REFERENCES T_MENU (PID));

ALTER TABLE T_STRUCTURE
    ADD (
        CONSTRAINT T_STRUCTURE_R01 FOREIGN KEY (PARENT_ID)
            REFERENCES T_STRUCTURE (ID));

ALTER TABLE DISTRICT
    ADD (
        CONSTRAINT DISTRICT_R01 FOREIGN KEY (DIVISION_ID)
            REFERENCES DIVISION (ID));

ALTER TABLE EMPLOYEES
    ADD (
        CONSTRAINT EMPLOYEES_R01 FOREIGN KEY (USER_GRP)
            REFERENCES USER_GROUP (ID));

ALTER TABLE EMP_EDUCATION
    ADD (
        CONSTRAINT FK_EMP_EDUCATION FOREIGN KEY (EMP_ID)
            REFERENCES EMPLOYEES (ID));

ALTER TABLE UPAZILA
    ADD (
        CONSTRAINT UPAZILA_R01 FOREIGN KEY (DISTRICT_ID)
            REFERENCES DISTRICT (ID));

ALTER TABLE UNIONS
    ADD (
        CONSTRAINT UNIONS_R01 FOREIGN KEY (UPAZILLA_ID)
            REFERENCES UPAZILA (ID));